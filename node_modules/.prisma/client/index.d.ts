
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>
/**
 * Model Tournament
 * 
 */
export type Tournament = $Result.DefaultSelection<Prisma.$TournamentPayload>
/**
 * Model Match
 * 
 */
export type Match = $Result.DefaultSelection<Prisma.$MatchPayload>
/**
 * Model Set
 * 
 */
export type Set = $Result.DefaultSelection<Prisma.$SetPayload>
/**
 * Model Group
 * 
 */
export type Group = $Result.DefaultSelection<Prisma.$GroupPayload>
/**
 * Model TournamentResult
 * 
 */
export type TournamentResult = $Result.DefaultSelection<Prisma.$TournamentResultPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Players
 * const players = await prisma.player.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Players
   * const players = await prisma.player.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs>;

  /**
   * `prisma.tournament`: Exposes CRUD operations for the **Tournament** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tournaments
    * const tournaments = await prisma.tournament.findMany()
    * ```
    */
  get tournament(): Prisma.TournamentDelegate<ExtArgs>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs>;

  /**
   * `prisma.set`: Exposes CRUD operations for the **Set** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sets
    * const sets = await prisma.set.findMany()
    * ```
    */
  get set(): Prisma.SetDelegate<ExtArgs>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<ExtArgs>;

  /**
   * `prisma.tournamentResult`: Exposes CRUD operations for the **TournamentResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TournamentResults
    * const tournamentResults = await prisma.tournamentResult.findMany()
    * ```
    */
  get tournamentResult(): Prisma.TournamentResultDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Player: 'Player',
    Tournament: 'Tournament',
    Match: 'Match',
    Set: 'Set',
    Group: 'Group',
    TournamentResult: 'TournamentResult'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "player" | "tournament" | "match" | "set" | "group" | "tournamentResult"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      Tournament: {
        payload: Prisma.$TournamentPayload<ExtArgs>
        fields: Prisma.TournamentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          findFirst: {
            args: Prisma.TournamentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          findMany: {
            args: Prisma.TournamentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>[]
          }
          create: {
            args: Prisma.TournamentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          createMany: {
            args: Prisma.TournamentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>[]
          }
          delete: {
            args: Prisma.TournamentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          update: {
            args: Prisma.TournamentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          deleteMany: {
            args: Prisma.TournamentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TournamentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          aggregate: {
            args: Prisma.TournamentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournament>
          }
          groupBy: {
            args: Prisma.TournamentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentCountAggregateOutputType> | number
          }
        }
      }
      Match: {
        payload: Prisma.$MatchPayload<ExtArgs>
        fields: Prisma.MatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findFirst: {
            args: Prisma.MatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findMany: {
            args: Prisma.MatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          create: {
            args: Prisma.MatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          createMany: {
            args: Prisma.MatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          delete: {
            args: Prisma.MatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          update: {
            args: Prisma.MatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          deleteMany: {
            args: Prisma.MatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.MatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchCountArgs<ExtArgs>
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      Set: {
        payload: Prisma.$SetPayload<ExtArgs>
        fields: Prisma.SetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetPayload>
          }
          findFirst: {
            args: Prisma.SetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetPayload>
          }
          findMany: {
            args: Prisma.SetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetPayload>[]
          }
          create: {
            args: Prisma.SetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetPayload>
          }
          createMany: {
            args: Prisma.SetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetPayload>[]
          }
          delete: {
            args: Prisma.SetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetPayload>
          }
          update: {
            args: Prisma.SetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetPayload>
          }
          deleteMany: {
            args: Prisma.SetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SetPayload>
          }
          aggregate: {
            args: Prisma.SetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSet>
          }
          groupBy: {
            args: Prisma.SetGroupByArgs<ExtArgs>
            result: $Utils.Optional<SetGroupByOutputType>[]
          }
          count: {
            args: Prisma.SetCountArgs<ExtArgs>
            result: $Utils.Optional<SetCountAggregateOutputType> | number
          }
        }
      }
      Group: {
        payload: Prisma.$GroupPayload<ExtArgs>
        fields: Prisma.GroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findFirst: {
            args: Prisma.GroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findMany: {
            args: Prisma.GroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          create: {
            args: Prisma.GroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          createMany: {
            args: Prisma.GroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          delete: {
            args: Prisma.GroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          update: {
            args: Prisma.GroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          deleteMany: {
            args: Prisma.GroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          aggregate: {
            args: Prisma.GroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroup>
          }
          groupBy: {
            args: Prisma.GroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupCountArgs<ExtArgs>
            result: $Utils.Optional<GroupCountAggregateOutputType> | number
          }
        }
      }
      TournamentResult: {
        payload: Prisma.$TournamentResultPayload<ExtArgs>
        fields: Prisma.TournamentResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentResultPayload>
          }
          findFirst: {
            args: Prisma.TournamentResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentResultPayload>
          }
          findMany: {
            args: Prisma.TournamentResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentResultPayload>[]
          }
          create: {
            args: Prisma.TournamentResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentResultPayload>
          }
          createMany: {
            args: Prisma.TournamentResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentResultPayload>[]
          }
          delete: {
            args: Prisma.TournamentResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentResultPayload>
          }
          update: {
            args: Prisma.TournamentResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentResultPayload>
          }
          deleteMany: {
            args: Prisma.TournamentResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TournamentResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentResultPayload>
          }
          aggregate: {
            args: Prisma.TournamentResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournamentResult>
          }
          groupBy: {
            args: Prisma.TournamentResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentResultCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentResultCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PlayerCountOutputType
   */

  export type PlayerCountOutputType = {
    matches1: number
    matches2: number
    matchesGanados: number
    tournamentResults: number
    groups: number
  }

  export type PlayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matches1?: boolean | PlayerCountOutputTypeCountMatches1Args
    matches2?: boolean | PlayerCountOutputTypeCountMatches2Args
    matchesGanados?: boolean | PlayerCountOutputTypeCountMatchesGanadosArgs
    tournamentResults?: boolean | PlayerCountOutputTypeCountTournamentResultsArgs
    groups?: boolean | PlayerCountOutputTypeCountGroupsArgs
  }

  // Custom InputTypes
  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     */
    select?: PlayerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountMatches1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountMatches2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountMatchesGanadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountTournamentResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentResultWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
  }


  /**
   * Count Type TournamentCountOutputType
   */

  export type TournamentCountOutputType = {
    matches: number
    groups: number
    tournamentResults: number
  }

  export type TournamentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matches?: boolean | TournamentCountOutputTypeCountMatchesArgs
    groups?: boolean | TournamentCountOutputTypeCountGroupsArgs
    tournamentResults?: boolean | TournamentCountOutputTypeCountTournamentResultsArgs
  }

  // Custom InputTypes
  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentCountOutputType
     */
    select?: TournamentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountTournamentResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentResultWhereInput
  }


  /**
   * Count Type MatchCountOutputType
   */

  export type MatchCountOutputType = {
    sets: number
  }

  export type MatchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sets?: boolean | MatchCountOutputTypeCountSetsArgs
  }

  // Custom InputTypes
  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchCountOutputType
     */
    select?: MatchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SetWhereInput
  }


  /**
   * Count Type GroupCountOutputType
   */

  export type GroupCountOutputType = {
    jugadores: number
  }

  export type GroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jugadores?: boolean | GroupCountOutputTypeCountJugadoresArgs
  }

  // Custom InputTypes
  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     */
    select?: GroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountJugadoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    id: number | null
    ranking: number | null
    puntos: number | null
  }

  export type PlayerSumAggregateOutputType = {
    id: number | null
    ranking: number | null
    puntos: number | null
  }

  export type PlayerMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    ranking: number | null
    puntos: number | null
    email: string | null
    password: string | null
    role: string | null
    telefono: string | null
    fechaNacimiento: Date | null
    activo: boolean | null
    fechaBaja: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    ranking: number | null
    puntos: number | null
    email: string | null
    password: string | null
    role: string | null
    telefono: string | null
    fechaNacimiento: Date | null
    activo: boolean | null
    fechaBaja: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    nombre: number
    ranking: number
    puntos: number
    email: number
    password: number
    role: number
    telefono: number
    fechaNacimiento: number
    activo: number
    fechaBaja: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    id?: true
    ranking?: true
    puntos?: true
  }

  export type PlayerSumAggregateInputType = {
    id?: true
    ranking?: true
    puntos?: true
  }

  export type PlayerMinAggregateInputType = {
    id?: true
    nombre?: true
    ranking?: true
    puntos?: true
    email?: true
    password?: true
    role?: true
    telefono?: true
    fechaNacimiento?: true
    activo?: true
    fechaBaja?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    nombre?: true
    ranking?: true
    puntos?: true
    email?: true
    password?: true
    role?: true
    telefono?: true
    fechaNacimiento?: true
    activo?: true
    fechaBaja?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    nombre?: true
    ranking?: true
    puntos?: true
    email?: true
    password?: true
    role?: true
    telefono?: true
    fechaNacimiento?: true
    activo?: true
    fechaBaja?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: number
    nombre: string
    ranking: number
    puntos: number
    email: string
    password: string
    role: string
    telefono: string | null
    fechaNacimiento: Date | null
    activo: boolean
    fechaBaja: Date | null
    createdAt: Date
    updatedAt: Date
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    ranking?: boolean
    puntos?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    telefono?: boolean
    fechaNacimiento?: boolean
    activo?: boolean
    fechaBaja?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    matches1?: boolean | Player$matches1Args<ExtArgs>
    matches2?: boolean | Player$matches2Args<ExtArgs>
    matchesGanados?: boolean | Player$matchesGanadosArgs<ExtArgs>
    tournamentResults?: boolean | Player$tournamentResultsArgs<ExtArgs>
    groups?: boolean | Player$groupsArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    ranking?: boolean
    puntos?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    telefono?: boolean
    fechaNacimiento?: boolean
    activo?: boolean
    fechaBaja?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectScalar = {
    id?: boolean
    nombre?: boolean
    ranking?: boolean
    puntos?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    telefono?: boolean
    fechaNacimiento?: boolean
    activo?: boolean
    fechaBaja?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matches1?: boolean | Player$matches1Args<ExtArgs>
    matches2?: boolean | Player$matches2Args<ExtArgs>
    matchesGanados?: boolean | Player$matchesGanadosArgs<ExtArgs>
    tournamentResults?: boolean | Player$tournamentResultsArgs<ExtArgs>
    groups?: boolean | Player$groupsArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {
      matches1: Prisma.$MatchPayload<ExtArgs>[]
      matches2: Prisma.$MatchPayload<ExtArgs>[]
      matchesGanados: Prisma.$MatchPayload<ExtArgs>[]
      tournamentResults: Prisma.$TournamentResultPayload<ExtArgs>[]
      groups: Prisma.$GroupPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      ranking: number
      puntos: number
      email: string
      password: string
      role: string
      telefono: string | null
      fechaNacimiento: Date | null
      activo: boolean
      fechaBaja: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["player"]>
    composites: {}
  }

  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerFindUniqueArgs>(args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Player that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerFindFirstArgs>(args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerFindManyArgs>(args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
     */
    create<T extends PlayerCreateArgs>(args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Players.
     * @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerCreateManyArgs>(args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Players and returns the data saved in the database.
     * @param {PlayerCreateManyAndReturnArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
     */
    delete<T extends PlayerDeleteArgs>(args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerUpdateArgs>(args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerDeleteManyArgs>(args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerUpdateManyArgs>(args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
     */
    upsert<T extends PlayerUpsertArgs>(args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    matches1<T extends Player$matches1Args<ExtArgs> = {}>(args?: Subset<T, Player$matches1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    matches2<T extends Player$matches2Args<ExtArgs> = {}>(args?: Subset<T, Player$matches2Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    matchesGanados<T extends Player$matchesGanadosArgs<ExtArgs> = {}>(args?: Subset<T, Player$matchesGanadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    tournamentResults<T extends Player$tournamentResultsArgs<ExtArgs> = {}>(args?: Subset<T, Player$tournamentResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentResultPayload<ExtArgs>, T, "findMany"> | Null>
    groups<T extends Player$groupsArgs<ExtArgs> = {}>(args?: Subset<T, Player$groupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Player model
   */ 
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'Int'>
    readonly nombre: FieldRef<"Player", 'String'>
    readonly ranking: FieldRef<"Player", 'Int'>
    readonly puntos: FieldRef<"Player", 'Int'>
    readonly email: FieldRef<"Player", 'String'>
    readonly password: FieldRef<"Player", 'String'>
    readonly role: FieldRef<"Player", 'String'>
    readonly telefono: FieldRef<"Player", 'String'>
    readonly fechaNacimiento: FieldRef<"Player", 'DateTime'>
    readonly activo: FieldRef<"Player", 'Boolean'>
    readonly fechaBaja: FieldRef<"Player", 'DateTime'>
    readonly createdAt: FieldRef<"Player", 'DateTime'>
    readonly updatedAt: FieldRef<"Player", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }

  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player createManyAndReturn
   */
  export type PlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
  }

  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }

  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
  }

  /**
   * Player.matches1
   */
  export type Player$matches1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Player.matches2
   */
  export type Player$matches2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Player.matchesGanados
   */
  export type Player$matchesGanadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Player.tournamentResults
   */
  export type Player$tournamentResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultInclude<ExtArgs> | null
    where?: TournamentResultWhereInput
    orderBy?: TournamentResultOrderByWithRelationInput | TournamentResultOrderByWithRelationInput[]
    cursor?: TournamentResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentResultScalarFieldEnum | TournamentResultScalarFieldEnum[]
  }

  /**
   * Player.groups
   */
  export type Player$groupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    cursor?: GroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
  }


  /**
   * Model Tournament
   */

  export type AggregateTournament = {
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  export type TournamentAvgAggregateOutputType = {
    id: number | null
    setsPorPartido: number | null
    maxJugadores: number | null
    puntosPorSet: number | null
  }

  export type TournamentSumAggregateOutputType = {
    id: number | null
    setsPorPartido: number | null
    maxJugadores: number | null
    puntosPorSet: number | null
  }

  export type TournamentMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    tipo: string | null
    setsPorPartido: number | null
    fechaInicio: Date | null
    fechaFin: Date | null
    maxJugadores: number | null
    puntosPorSet: number | null
    descripcion: string | null
    estado: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    tipo: string | null
    setsPorPartido: number | null
    fechaInicio: Date | null
    fechaFin: Date | null
    maxJugadores: number | null
    puntosPorSet: number | null
    descripcion: string | null
    estado: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentCountAggregateOutputType = {
    id: number
    nombre: number
    tipo: number
    setsPorPartido: number
    fechaInicio: number
    fechaFin: number
    maxJugadores: number
    puntosPorSet: number
    descripcion: number
    estado: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TournamentAvgAggregateInputType = {
    id?: true
    setsPorPartido?: true
    maxJugadores?: true
    puntosPorSet?: true
  }

  export type TournamentSumAggregateInputType = {
    id?: true
    setsPorPartido?: true
    maxJugadores?: true
    puntosPorSet?: true
  }

  export type TournamentMinAggregateInputType = {
    id?: true
    nombre?: true
    tipo?: true
    setsPorPartido?: true
    fechaInicio?: true
    fechaFin?: true
    maxJugadores?: true
    puntosPorSet?: true
    descripcion?: true
    estado?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentMaxAggregateInputType = {
    id?: true
    nombre?: true
    tipo?: true
    setsPorPartido?: true
    fechaInicio?: true
    fechaFin?: true
    maxJugadores?: true
    puntosPorSet?: true
    descripcion?: true
    estado?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentCountAggregateInputType = {
    id?: true
    nombre?: true
    tipo?: true
    setsPorPartido?: true
    fechaInicio?: true
    fechaFin?: true
    maxJugadores?: true
    puntosPorSet?: true
    descripcion?: true
    estado?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TournamentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tournament to aggregate.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tournaments
    **/
    _count?: true | TournamentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentMaxAggregateInputType
  }

  export type GetTournamentAggregateType<T extends TournamentAggregateArgs> = {
        [P in keyof T & keyof AggregateTournament]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournament[P]>
      : GetScalarType<T[P], AggregateTournament[P]>
  }




  export type TournamentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentWhereInput
    orderBy?: TournamentOrderByWithAggregationInput | TournamentOrderByWithAggregationInput[]
    by: TournamentScalarFieldEnum[] | TournamentScalarFieldEnum
    having?: TournamentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentCountAggregateInputType | true
    _avg?: TournamentAvgAggregateInputType
    _sum?: TournamentSumAggregateInputType
    _min?: TournamentMinAggregateInputType
    _max?: TournamentMaxAggregateInputType
  }

  export type TournamentGroupByOutputType = {
    id: number
    nombre: string
    tipo: string
    setsPorPartido: number
    fechaInicio: Date
    fechaFin: Date | null
    maxJugadores: number
    puntosPorSet: number
    descripcion: string | null
    estado: string
    createdAt: Date
    updatedAt: Date
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  type GetTournamentGroupByPayload<T extends TournamentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentGroupByOutputType[P]>
        }
      >
    >


  export type TournamentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    tipo?: boolean
    setsPorPartido?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    maxJugadores?: boolean
    puntosPorSet?: boolean
    descripcion?: boolean
    estado?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    matches?: boolean | Tournament$matchesArgs<ExtArgs>
    groups?: boolean | Tournament$groupsArgs<ExtArgs>
    tournamentResults?: boolean | Tournament$tournamentResultsArgs<ExtArgs>
    _count?: boolean | TournamentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournament"]>

  export type TournamentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    tipo?: boolean
    setsPorPartido?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    maxJugadores?: boolean
    puntosPorSet?: boolean
    descripcion?: boolean
    estado?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tournament"]>

  export type TournamentSelectScalar = {
    id?: boolean
    nombre?: boolean
    tipo?: boolean
    setsPorPartido?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    maxJugadores?: boolean
    puntosPorSet?: boolean
    descripcion?: boolean
    estado?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TournamentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matches?: boolean | Tournament$matchesArgs<ExtArgs>
    groups?: boolean | Tournament$groupsArgs<ExtArgs>
    tournamentResults?: boolean | Tournament$tournamentResultsArgs<ExtArgs>
    _count?: boolean | TournamentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TournamentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TournamentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tournament"
    objects: {
      matches: Prisma.$MatchPayload<ExtArgs>[]
      groups: Prisma.$GroupPayload<ExtArgs>[]
      tournamentResults: Prisma.$TournamentResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      tipo: string
      setsPorPartido: number
      fechaInicio: Date
      fechaFin: Date | null
      maxJugadores: number
      puntosPorSet: number
      descripcion: string | null
      estado: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tournament"]>
    composites: {}
  }

  type TournamentGetPayload<S extends boolean | null | undefined | TournamentDefaultArgs> = $Result.GetResult<Prisma.$TournamentPayload, S>

  type TournamentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TournamentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TournamentCountAggregateInputType | true
    }

  export interface TournamentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tournament'], meta: { name: 'Tournament' } }
    /**
     * Find zero or one Tournament that matches the filter.
     * @param {TournamentFindUniqueArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentFindUniqueArgs>(args: SelectSubset<T, TournamentFindUniqueArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tournament that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TournamentFindUniqueOrThrowArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tournament that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindFirstArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentFindFirstArgs>(args?: SelectSubset<T, TournamentFindFirstArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tournament that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindFirstOrThrowArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tournaments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tournaments
     * const tournaments = await prisma.tournament.findMany()
     * 
     * // Get first 10 Tournaments
     * const tournaments = await prisma.tournament.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentWithIdOnly = await prisma.tournament.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentFindManyArgs>(args?: SelectSubset<T, TournamentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tournament.
     * @param {TournamentCreateArgs} args - Arguments to create a Tournament.
     * @example
     * // Create one Tournament
     * const Tournament = await prisma.tournament.create({
     *   data: {
     *     // ... data to create a Tournament
     *   }
     * })
     * 
     */
    create<T extends TournamentCreateArgs>(args: SelectSubset<T, TournamentCreateArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tournaments.
     * @param {TournamentCreateManyArgs} args - Arguments to create many Tournaments.
     * @example
     * // Create many Tournaments
     * const tournament = await prisma.tournament.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentCreateManyArgs>(args?: SelectSubset<T, TournamentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tournaments and returns the data saved in the database.
     * @param {TournamentCreateManyAndReturnArgs} args - Arguments to create many Tournaments.
     * @example
     * // Create many Tournaments
     * const tournament = await prisma.tournament.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tournaments and only return the `id`
     * const tournamentWithIdOnly = await prisma.tournament.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tournament.
     * @param {TournamentDeleteArgs} args - Arguments to delete one Tournament.
     * @example
     * // Delete one Tournament
     * const Tournament = await prisma.tournament.delete({
     *   where: {
     *     // ... filter to delete one Tournament
     *   }
     * })
     * 
     */
    delete<T extends TournamentDeleteArgs>(args: SelectSubset<T, TournamentDeleteArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tournament.
     * @param {TournamentUpdateArgs} args - Arguments to update one Tournament.
     * @example
     * // Update one Tournament
     * const tournament = await prisma.tournament.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentUpdateArgs>(args: SelectSubset<T, TournamentUpdateArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tournaments.
     * @param {TournamentDeleteManyArgs} args - Arguments to filter Tournaments to delete.
     * @example
     * // Delete a few Tournaments
     * const { count } = await prisma.tournament.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentDeleteManyArgs>(args?: SelectSubset<T, TournamentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tournaments
     * const tournament = await prisma.tournament.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentUpdateManyArgs>(args: SelectSubset<T, TournamentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tournament.
     * @param {TournamentUpsertArgs} args - Arguments to update or create a Tournament.
     * @example
     * // Update or create a Tournament
     * const tournament = await prisma.tournament.upsert({
     *   create: {
     *     // ... data to create a Tournament
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tournament we want to update
     *   }
     * })
     */
    upsert<T extends TournamentUpsertArgs>(args: SelectSubset<T, TournamentUpsertArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentCountArgs} args - Arguments to filter Tournaments to count.
     * @example
     * // Count the number of Tournaments
     * const count = await prisma.tournament.count({
     *   where: {
     *     // ... the filter for the Tournaments we want to count
     *   }
     * })
    **/
    count<T extends TournamentCountArgs>(
      args?: Subset<T, TournamentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentAggregateArgs>(args: Subset<T, TournamentAggregateArgs>): Prisma.PrismaPromise<GetTournamentAggregateType<T>>

    /**
     * Group by Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentGroupByArgs['orderBy'] }
        : { orderBy?: TournamentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tournament model
   */
  readonly fields: TournamentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tournament.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    matches<T extends Tournament$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    groups<T extends Tournament$groupsArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$groupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany"> | Null>
    tournamentResults<T extends Tournament$tournamentResultsArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$tournamentResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentResultPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tournament model
   */ 
  interface TournamentFieldRefs {
    readonly id: FieldRef<"Tournament", 'Int'>
    readonly nombre: FieldRef<"Tournament", 'String'>
    readonly tipo: FieldRef<"Tournament", 'String'>
    readonly setsPorPartido: FieldRef<"Tournament", 'Int'>
    readonly fechaInicio: FieldRef<"Tournament", 'DateTime'>
    readonly fechaFin: FieldRef<"Tournament", 'DateTime'>
    readonly maxJugadores: FieldRef<"Tournament", 'Int'>
    readonly puntosPorSet: FieldRef<"Tournament", 'Int'>
    readonly descripcion: FieldRef<"Tournament", 'String'>
    readonly estado: FieldRef<"Tournament", 'String'>
    readonly createdAt: FieldRef<"Tournament", 'DateTime'>
    readonly updatedAt: FieldRef<"Tournament", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tournament findUnique
   */
  export type TournamentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament findUniqueOrThrow
   */
  export type TournamentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament findFirst
   */
  export type TournamentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tournaments.
     */
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Tournament findFirstOrThrow
   */
  export type TournamentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tournaments.
     */
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Tournament findMany
   */
  export type TournamentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournaments to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Tournament create
   */
  export type TournamentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The data needed to create a Tournament.
     */
    data: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
  }

  /**
   * Tournament createMany
   */
  export type TournamentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tournaments.
     */
    data: TournamentCreateManyInput | TournamentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tournament createManyAndReturn
   */
  export type TournamentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tournaments.
     */
    data: TournamentCreateManyInput | TournamentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tournament update
   */
  export type TournamentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The data needed to update a Tournament.
     */
    data: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
    /**
     * Choose, which Tournament to update.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament updateMany
   */
  export type TournamentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tournaments.
     */
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyInput>
    /**
     * Filter which Tournaments to update
     */
    where?: TournamentWhereInput
  }

  /**
   * Tournament upsert
   */
  export type TournamentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The filter to search for the Tournament to update in case it exists.
     */
    where: TournamentWhereUniqueInput
    /**
     * In case the Tournament found by the `where` argument doesn't exist, create a new Tournament with this data.
     */
    create: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
    /**
     * In case the Tournament was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
  }

  /**
   * Tournament delete
   */
  export type TournamentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter which Tournament to delete.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament deleteMany
   */
  export type TournamentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tournaments to delete
     */
    where?: TournamentWhereInput
  }

  /**
   * Tournament.matches
   */
  export type Tournament$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Tournament.groups
   */
  export type Tournament$groupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    cursor?: GroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Tournament.tournamentResults
   */
  export type Tournament$tournamentResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultInclude<ExtArgs> | null
    where?: TournamentResultWhereInput
    orderBy?: TournamentResultOrderByWithRelationInput | TournamentResultOrderByWithRelationInput[]
    cursor?: TournamentResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentResultScalarFieldEnum | TournamentResultScalarFieldEnum[]
  }

  /**
   * Tournament without action
   */
  export type TournamentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
  }


  /**
   * Model Match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchAvgAggregateOutputType = {
    id: number | null
    torneoId: number | null
    jugador1Id: number | null
    jugador2Id: number | null
    ganadorId: number | null
    setsJ1: number | null
    setsJ2: number | null
    ronda: number | null
  }

  export type MatchSumAggregateOutputType = {
    id: number | null
    torneoId: number | null
    jugador1Id: number | null
    jugador2Id: number | null
    ganadorId: number | null
    setsJ1: number | null
    setsJ2: number | null
    ronda: number | null
  }

  export type MatchMinAggregateOutputType = {
    id: number | null
    torneoId: number | null
    jugador1Id: number | null
    jugador2Id: number | null
    ganadorId: number | null
    setsJ1: number | null
    setsJ2: number | null
    ronda: number | null
    fase: string | null
    estado: string | null
    fecha: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchMaxAggregateOutputType = {
    id: number | null
    torneoId: number | null
    jugador1Id: number | null
    jugador2Id: number | null
    ganadorId: number | null
    setsJ1: number | null
    setsJ2: number | null
    ronda: number | null
    fase: string | null
    estado: string | null
    fecha: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    torneoId: number
    jugador1Id: number
    jugador2Id: number
    ganadorId: number
    setsJ1: number
    setsJ2: number
    ronda: number
    fase: number
    estado: number
    fecha: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MatchAvgAggregateInputType = {
    id?: true
    torneoId?: true
    jugador1Id?: true
    jugador2Id?: true
    ganadorId?: true
    setsJ1?: true
    setsJ2?: true
    ronda?: true
  }

  export type MatchSumAggregateInputType = {
    id?: true
    torneoId?: true
    jugador1Id?: true
    jugador2Id?: true
    ganadorId?: true
    setsJ1?: true
    setsJ2?: true
    ronda?: true
  }

  export type MatchMinAggregateInputType = {
    id?: true
    torneoId?: true
    jugador1Id?: true
    jugador2Id?: true
    ganadorId?: true
    setsJ1?: true
    setsJ2?: true
    ronda?: true
    fase?: true
    estado?: true
    fecha?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    torneoId?: true
    jugador1Id?: true
    jugador2Id?: true
    ganadorId?: true
    setsJ1?: true
    setsJ2?: true
    ronda?: true
    fase?: true
    estado?: true
    fecha?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    torneoId?: true
    jugador1Id?: true
    jugador2Id?: true
    ganadorId?: true
    setsJ1?: true
    setsJ2?: true
    ronda?: true
    fase?: true
    estado?: true
    fecha?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithAggregationInput | MatchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _avg?: MatchAvgAggregateInputType
    _sum?: MatchSumAggregateInputType
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    id: number
    torneoId: number
    jugador1Id: number
    jugador2Id: number
    ganadorId: number | null
    setsJ1: number
    setsJ2: number
    ronda: number
    fase: string
    estado: string
    fecha: Date | null
    createdAt: Date
    updatedAt: Date
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    torneoId?: boolean
    jugador1Id?: boolean
    jugador2Id?: boolean
    ganadorId?: boolean
    setsJ1?: boolean
    setsJ2?: boolean
    ronda?: boolean
    fase?: boolean
    estado?: boolean
    fecha?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    torneo?: boolean | TournamentDefaultArgs<ExtArgs>
    jugador1?: boolean | PlayerDefaultArgs<ExtArgs>
    jugador2?: boolean | PlayerDefaultArgs<ExtArgs>
    ganador?: boolean | Match$ganadorArgs<ExtArgs>
    sets?: boolean | Match$setsArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    torneoId?: boolean
    jugador1Id?: boolean
    jugador2Id?: boolean
    ganadorId?: boolean
    setsJ1?: boolean
    setsJ2?: boolean
    ronda?: boolean
    fase?: boolean
    estado?: boolean
    fecha?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    torneo?: boolean | TournamentDefaultArgs<ExtArgs>
    jugador1?: boolean | PlayerDefaultArgs<ExtArgs>
    jugador2?: boolean | PlayerDefaultArgs<ExtArgs>
    ganador?: boolean | Match$ganadorArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectScalar = {
    id?: boolean
    torneoId?: boolean
    jugador1Id?: boolean
    jugador2Id?: boolean
    ganadorId?: boolean
    setsJ1?: boolean
    setsJ2?: boolean
    ronda?: boolean
    fase?: boolean
    estado?: boolean
    fecha?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    torneo?: boolean | TournamentDefaultArgs<ExtArgs>
    jugador1?: boolean | PlayerDefaultArgs<ExtArgs>
    jugador2?: boolean | PlayerDefaultArgs<ExtArgs>
    ganador?: boolean | Match$ganadorArgs<ExtArgs>
    sets?: boolean | Match$setsArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    torneo?: boolean | TournamentDefaultArgs<ExtArgs>
    jugador1?: boolean | PlayerDefaultArgs<ExtArgs>
    jugador2?: boolean | PlayerDefaultArgs<ExtArgs>
    ganador?: boolean | Match$ganadorArgs<ExtArgs>
  }

  export type $MatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Match"
    objects: {
      torneo: Prisma.$TournamentPayload<ExtArgs>
      jugador1: Prisma.$PlayerPayload<ExtArgs>
      jugador2: Prisma.$PlayerPayload<ExtArgs>
      ganador: Prisma.$PlayerPayload<ExtArgs> | null
      sets: Prisma.$SetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      torneoId: number
      jugador1Id: number
      jugador2Id: number
      ganadorId: number | null
      setsJ1: number
      setsJ2: number
      ronda: number
      fase: string
      estado: string
      fecha: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["match"]>
    composites: {}
  }

  type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = $Result.GetResult<Prisma.$MatchPayload, S>

  type MatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchFindUniqueArgs>(args: SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Match that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchFindFirstArgs>(args?: SelectSubset<T, MatchFindFirstArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchFindManyArgs>(args?: SelectSubset<T, MatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
     */
    create<T extends MatchCreateArgs>(args: SelectSubset<T, MatchCreateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Matches.
     * @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchCreateManyArgs>(args?: SelectSubset<T, MatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Matches and returns the data saved in the database.
     * @param {MatchCreateManyAndReturnArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
     */
    delete<T extends MatchDeleteArgs>(args: SelectSubset<T, MatchDeleteArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchUpdateArgs>(args: SelectSubset<T, MatchUpdateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchDeleteManyArgs>(args?: SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchUpdateManyArgs>(args: SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
     */
    upsert<T extends MatchUpsertArgs>(args: SelectSubset<T, MatchUpsertArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Match model
   */
  readonly fields: MatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    torneo<T extends TournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentDefaultArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jugador1<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jugador2<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    ganador<T extends Match$ganadorArgs<ExtArgs> = {}>(args?: Subset<T, Match$ganadorArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sets<T extends Match$setsArgs<ExtArgs> = {}>(args?: Subset<T, Match$setsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SetPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Match model
   */ 
  interface MatchFieldRefs {
    readonly id: FieldRef<"Match", 'Int'>
    readonly torneoId: FieldRef<"Match", 'Int'>
    readonly jugador1Id: FieldRef<"Match", 'Int'>
    readonly jugador2Id: FieldRef<"Match", 'Int'>
    readonly ganadorId: FieldRef<"Match", 'Int'>
    readonly setsJ1: FieldRef<"Match", 'Int'>
    readonly setsJ2: FieldRef<"Match", 'Int'>
    readonly ronda: FieldRef<"Match", 'Int'>
    readonly fase: FieldRef<"Match", 'String'>
    readonly estado: FieldRef<"Match", 'String'>
    readonly fecha: FieldRef<"Match", 'DateTime'>
    readonly createdAt: FieldRef<"Match", 'DateTime'>
    readonly updatedAt: FieldRef<"Match", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findMany
   */
  export type MatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match create
   */
  export type MatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }

  /**
   * Match createMany
   */
  export type MatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Match createManyAndReturn
   */
  export type MatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match update
   */
  export type MatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
  }

  /**
   * Match upsert
   */
  export type MatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }

  /**
   * Match delete
   */
  export type MatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
  }

  /**
   * Match.ganador
   */
  export type Match$ganadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
  }

  /**
   * Match.sets
   */
  export type Match$setsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Set
     */
    select?: SetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetInclude<ExtArgs> | null
    where?: SetWhereInput
    orderBy?: SetOrderByWithRelationInput | SetOrderByWithRelationInput[]
    cursor?: SetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SetScalarFieldEnum | SetScalarFieldEnum[]
  }

  /**
   * Match without action
   */
  export type MatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
  }


  /**
   * Model Set
   */

  export type AggregateSet = {
    _count: SetCountAggregateOutputType | null
    _avg: SetAvgAggregateOutputType | null
    _sum: SetSumAggregateOutputType | null
    _min: SetMinAggregateOutputType | null
    _max: SetMaxAggregateOutputType | null
  }

  export type SetAvgAggregateOutputType = {
    id: number | null
    partidoId: number | null
    numeroSet: number | null
    puntosJ1: number | null
    puntosJ2: number | null
    ganadorId: number | null
  }

  export type SetSumAggregateOutputType = {
    id: number | null
    partidoId: number | null
    numeroSet: number | null
    puntosJ1: number | null
    puntosJ2: number | null
    ganadorId: number | null
  }

  export type SetMinAggregateOutputType = {
    id: number | null
    partidoId: number | null
    numeroSet: number | null
    puntosJ1: number | null
    puntosJ2: number | null
    ganadorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SetMaxAggregateOutputType = {
    id: number | null
    partidoId: number | null
    numeroSet: number | null
    puntosJ1: number | null
    puntosJ2: number | null
    ganadorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SetCountAggregateOutputType = {
    id: number
    partidoId: number
    numeroSet: number
    puntosJ1: number
    puntosJ2: number
    ganadorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SetAvgAggregateInputType = {
    id?: true
    partidoId?: true
    numeroSet?: true
    puntosJ1?: true
    puntosJ2?: true
    ganadorId?: true
  }

  export type SetSumAggregateInputType = {
    id?: true
    partidoId?: true
    numeroSet?: true
    puntosJ1?: true
    puntosJ2?: true
    ganadorId?: true
  }

  export type SetMinAggregateInputType = {
    id?: true
    partidoId?: true
    numeroSet?: true
    puntosJ1?: true
    puntosJ2?: true
    ganadorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SetMaxAggregateInputType = {
    id?: true
    partidoId?: true
    numeroSet?: true
    puntosJ1?: true
    puntosJ2?: true
    ganadorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SetCountAggregateInputType = {
    id?: true
    partidoId?: true
    numeroSet?: true
    puntosJ1?: true
    puntosJ2?: true
    ganadorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Set to aggregate.
     */
    where?: SetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sets to fetch.
     */
    orderBy?: SetOrderByWithRelationInput | SetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sets
    **/
    _count?: true | SetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SetMaxAggregateInputType
  }

  export type GetSetAggregateType<T extends SetAggregateArgs> = {
        [P in keyof T & keyof AggregateSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSet[P]>
      : GetScalarType<T[P], AggregateSet[P]>
  }




  export type SetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SetWhereInput
    orderBy?: SetOrderByWithAggregationInput | SetOrderByWithAggregationInput[]
    by: SetScalarFieldEnum[] | SetScalarFieldEnum
    having?: SetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SetCountAggregateInputType | true
    _avg?: SetAvgAggregateInputType
    _sum?: SetSumAggregateInputType
    _min?: SetMinAggregateInputType
    _max?: SetMaxAggregateInputType
  }

  export type SetGroupByOutputType = {
    id: number
    partidoId: number
    numeroSet: number
    puntosJ1: number
    puntosJ2: number
    ganadorId: number | null
    createdAt: Date
    updatedAt: Date
    _count: SetCountAggregateOutputType | null
    _avg: SetAvgAggregateOutputType | null
    _sum: SetSumAggregateOutputType | null
    _min: SetMinAggregateOutputType | null
    _max: SetMaxAggregateOutputType | null
  }

  type GetSetGroupByPayload<T extends SetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SetGroupByOutputType[P]>
            : GetScalarType<T[P], SetGroupByOutputType[P]>
        }
      >
    >


  export type SetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partidoId?: boolean
    numeroSet?: boolean
    puntosJ1?: boolean
    puntosJ2?: boolean
    ganadorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    partido?: boolean | MatchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["set"]>

  export type SetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partidoId?: boolean
    numeroSet?: boolean
    puntosJ1?: boolean
    puntosJ2?: boolean
    ganadorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    partido?: boolean | MatchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["set"]>

  export type SetSelectScalar = {
    id?: boolean
    partidoId?: boolean
    numeroSet?: boolean
    puntosJ1?: boolean
    puntosJ2?: boolean
    ganadorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partido?: boolean | MatchDefaultArgs<ExtArgs>
  }
  export type SetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partido?: boolean | MatchDefaultArgs<ExtArgs>
  }

  export type $SetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Set"
    objects: {
      partido: Prisma.$MatchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      partidoId: number
      numeroSet: number
      puntosJ1: number
      puntosJ2: number
      ganadorId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["set"]>
    composites: {}
  }

  type SetGetPayload<S extends boolean | null | undefined | SetDefaultArgs> = $Result.GetResult<Prisma.$SetPayload, S>

  type SetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SetCountAggregateInputType | true
    }

  export interface SetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Set'], meta: { name: 'Set' } }
    /**
     * Find zero or one Set that matches the filter.
     * @param {SetFindUniqueArgs} args - Arguments to find a Set
     * @example
     * // Get one Set
     * const set = await prisma.set.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SetFindUniqueArgs>(args: SelectSubset<T, SetFindUniqueArgs<ExtArgs>>): Prisma__SetClient<$Result.GetResult<Prisma.$SetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Set that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SetFindUniqueOrThrowArgs} args - Arguments to find a Set
     * @example
     * // Get one Set
     * const set = await prisma.set.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SetFindUniqueOrThrowArgs>(args: SelectSubset<T, SetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SetClient<$Result.GetResult<Prisma.$SetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Set that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetFindFirstArgs} args - Arguments to find a Set
     * @example
     * // Get one Set
     * const set = await prisma.set.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SetFindFirstArgs>(args?: SelectSubset<T, SetFindFirstArgs<ExtArgs>>): Prisma__SetClient<$Result.GetResult<Prisma.$SetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Set that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetFindFirstOrThrowArgs} args - Arguments to find a Set
     * @example
     * // Get one Set
     * const set = await prisma.set.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SetFindFirstOrThrowArgs>(args?: SelectSubset<T, SetFindFirstOrThrowArgs<ExtArgs>>): Prisma__SetClient<$Result.GetResult<Prisma.$SetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sets
     * const sets = await prisma.set.findMany()
     * 
     * // Get first 10 Sets
     * const sets = await prisma.set.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const setWithIdOnly = await prisma.set.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SetFindManyArgs>(args?: SelectSubset<T, SetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Set.
     * @param {SetCreateArgs} args - Arguments to create a Set.
     * @example
     * // Create one Set
     * const Set = await prisma.set.create({
     *   data: {
     *     // ... data to create a Set
     *   }
     * })
     * 
     */
    create<T extends SetCreateArgs>(args: SelectSubset<T, SetCreateArgs<ExtArgs>>): Prisma__SetClient<$Result.GetResult<Prisma.$SetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sets.
     * @param {SetCreateManyArgs} args - Arguments to create many Sets.
     * @example
     * // Create many Sets
     * const set = await prisma.set.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SetCreateManyArgs>(args?: SelectSubset<T, SetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sets and returns the data saved in the database.
     * @param {SetCreateManyAndReturnArgs} args - Arguments to create many Sets.
     * @example
     * // Create many Sets
     * const set = await prisma.set.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sets and only return the `id`
     * const setWithIdOnly = await prisma.set.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SetCreateManyAndReturnArgs>(args?: SelectSubset<T, SetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Set.
     * @param {SetDeleteArgs} args - Arguments to delete one Set.
     * @example
     * // Delete one Set
     * const Set = await prisma.set.delete({
     *   where: {
     *     // ... filter to delete one Set
     *   }
     * })
     * 
     */
    delete<T extends SetDeleteArgs>(args: SelectSubset<T, SetDeleteArgs<ExtArgs>>): Prisma__SetClient<$Result.GetResult<Prisma.$SetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Set.
     * @param {SetUpdateArgs} args - Arguments to update one Set.
     * @example
     * // Update one Set
     * const set = await prisma.set.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SetUpdateArgs>(args: SelectSubset<T, SetUpdateArgs<ExtArgs>>): Prisma__SetClient<$Result.GetResult<Prisma.$SetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sets.
     * @param {SetDeleteManyArgs} args - Arguments to filter Sets to delete.
     * @example
     * // Delete a few Sets
     * const { count } = await prisma.set.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SetDeleteManyArgs>(args?: SelectSubset<T, SetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sets
     * const set = await prisma.set.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SetUpdateManyArgs>(args: SelectSubset<T, SetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Set.
     * @param {SetUpsertArgs} args - Arguments to update or create a Set.
     * @example
     * // Update or create a Set
     * const set = await prisma.set.upsert({
     *   create: {
     *     // ... data to create a Set
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Set we want to update
     *   }
     * })
     */
    upsert<T extends SetUpsertArgs>(args: SelectSubset<T, SetUpsertArgs<ExtArgs>>): Prisma__SetClient<$Result.GetResult<Prisma.$SetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetCountArgs} args - Arguments to filter Sets to count.
     * @example
     * // Count the number of Sets
     * const count = await prisma.set.count({
     *   where: {
     *     // ... the filter for the Sets we want to count
     *   }
     * })
    **/
    count<T extends SetCountArgs>(
      args?: Subset<T, SetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Set.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SetAggregateArgs>(args: Subset<T, SetAggregateArgs>): Prisma.PrismaPromise<GetSetAggregateType<T>>

    /**
     * Group by Set.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SetGroupByArgs['orderBy'] }
        : { orderBy?: SetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Set model
   */
  readonly fields: SetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Set.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    partido<T extends MatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchDefaultArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Set model
   */ 
  interface SetFieldRefs {
    readonly id: FieldRef<"Set", 'Int'>
    readonly partidoId: FieldRef<"Set", 'Int'>
    readonly numeroSet: FieldRef<"Set", 'Int'>
    readonly puntosJ1: FieldRef<"Set", 'Int'>
    readonly puntosJ2: FieldRef<"Set", 'Int'>
    readonly ganadorId: FieldRef<"Set", 'Int'>
    readonly createdAt: FieldRef<"Set", 'DateTime'>
    readonly updatedAt: FieldRef<"Set", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Set findUnique
   */
  export type SetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Set
     */
    select?: SetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetInclude<ExtArgs> | null
    /**
     * Filter, which Set to fetch.
     */
    where: SetWhereUniqueInput
  }

  /**
   * Set findUniqueOrThrow
   */
  export type SetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Set
     */
    select?: SetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetInclude<ExtArgs> | null
    /**
     * Filter, which Set to fetch.
     */
    where: SetWhereUniqueInput
  }

  /**
   * Set findFirst
   */
  export type SetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Set
     */
    select?: SetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetInclude<ExtArgs> | null
    /**
     * Filter, which Set to fetch.
     */
    where?: SetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sets to fetch.
     */
    orderBy?: SetOrderByWithRelationInput | SetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sets.
     */
    cursor?: SetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sets.
     */
    distinct?: SetScalarFieldEnum | SetScalarFieldEnum[]
  }

  /**
   * Set findFirstOrThrow
   */
  export type SetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Set
     */
    select?: SetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetInclude<ExtArgs> | null
    /**
     * Filter, which Set to fetch.
     */
    where?: SetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sets to fetch.
     */
    orderBy?: SetOrderByWithRelationInput | SetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sets.
     */
    cursor?: SetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sets.
     */
    distinct?: SetScalarFieldEnum | SetScalarFieldEnum[]
  }

  /**
   * Set findMany
   */
  export type SetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Set
     */
    select?: SetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetInclude<ExtArgs> | null
    /**
     * Filter, which Sets to fetch.
     */
    where?: SetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sets to fetch.
     */
    orderBy?: SetOrderByWithRelationInput | SetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sets.
     */
    cursor?: SetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sets.
     */
    skip?: number
    distinct?: SetScalarFieldEnum | SetScalarFieldEnum[]
  }

  /**
   * Set create
   */
  export type SetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Set
     */
    select?: SetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetInclude<ExtArgs> | null
    /**
     * The data needed to create a Set.
     */
    data: XOR<SetCreateInput, SetUncheckedCreateInput>
  }

  /**
   * Set createMany
   */
  export type SetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sets.
     */
    data: SetCreateManyInput | SetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Set createManyAndReturn
   */
  export type SetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Set
     */
    select?: SetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sets.
     */
    data: SetCreateManyInput | SetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Set update
   */
  export type SetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Set
     */
    select?: SetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetInclude<ExtArgs> | null
    /**
     * The data needed to update a Set.
     */
    data: XOR<SetUpdateInput, SetUncheckedUpdateInput>
    /**
     * Choose, which Set to update.
     */
    where: SetWhereUniqueInput
  }

  /**
   * Set updateMany
   */
  export type SetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sets.
     */
    data: XOR<SetUpdateManyMutationInput, SetUncheckedUpdateManyInput>
    /**
     * Filter which Sets to update
     */
    where?: SetWhereInput
  }

  /**
   * Set upsert
   */
  export type SetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Set
     */
    select?: SetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetInclude<ExtArgs> | null
    /**
     * The filter to search for the Set to update in case it exists.
     */
    where: SetWhereUniqueInput
    /**
     * In case the Set found by the `where` argument doesn't exist, create a new Set with this data.
     */
    create: XOR<SetCreateInput, SetUncheckedCreateInput>
    /**
     * In case the Set was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SetUpdateInput, SetUncheckedUpdateInput>
  }

  /**
   * Set delete
   */
  export type SetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Set
     */
    select?: SetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetInclude<ExtArgs> | null
    /**
     * Filter which Set to delete.
     */
    where: SetWhereUniqueInput
  }

  /**
   * Set deleteMany
   */
  export type SetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sets to delete
     */
    where?: SetWhereInput
  }

  /**
   * Set without action
   */
  export type SetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Set
     */
    select?: SetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetInclude<ExtArgs> | null
  }


  /**
   * Model Group
   */

  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupAvgAggregateOutputType = {
    id: number | null
    torneoId: number | null
  }

  export type GroupSumAggregateOutputType = {
    id: number | null
    torneoId: number | null
  }

  export type GroupMinAggregateOutputType = {
    id: number | null
    torneoId: number | null
    nombre: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupMaxAggregateOutputType = {
    id: number | null
    torneoId: number | null
    nombre: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    torneoId: number
    nombre: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GroupAvgAggregateInputType = {
    id?: true
    torneoId?: true
  }

  export type GroupSumAggregateInputType = {
    id?: true
    torneoId?: true
  }

  export type GroupMinAggregateInputType = {
    id?: true
    torneoId?: true
    nombre?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    torneoId?: true
    nombre?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    torneoId?: true
    nombre?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Group to aggregate.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithAggregationInput | GroupOrderByWithAggregationInput[]
    by: GroupScalarFieldEnum[] | GroupScalarFieldEnum
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _avg?: GroupAvgAggregateInputType
    _sum?: GroupSumAggregateInputType
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }

  export type GroupGroupByOutputType = {
    id: number
    torneoId: number
    nombre: string
    createdAt: Date
    updatedAt: Date
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    torneoId?: boolean
    nombre?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    torneo?: boolean | TournamentDefaultArgs<ExtArgs>
    jugadores?: boolean | Group$jugadoresArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type GroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    torneoId?: boolean
    nombre?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    torneo?: boolean | TournamentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type GroupSelectScalar = {
    id?: boolean
    torneoId?: boolean
    nombre?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    torneo?: boolean | TournamentDefaultArgs<ExtArgs>
    jugadores?: boolean | Group$jugadoresArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    torneo?: boolean | TournamentDefaultArgs<ExtArgs>
  }

  export type $GroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Group"
    objects: {
      torneo: Prisma.$TournamentPayload<ExtArgs>
      jugadores: Prisma.$PlayerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      torneoId: number
      nombre: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["group"]>
    composites: {}
  }

  type GroupGetPayload<S extends boolean | null | undefined | GroupDefaultArgs> = $Result.GetResult<Prisma.$GroupPayload, S>

  type GroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface GroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Group'], meta: { name: 'Group' } }
    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupFindUniqueArgs>(args: SelectSubset<T, GroupFindUniqueArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Group that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupFindFirstArgs>(args?: SelectSubset<T, GroupFindFirstArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Group that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupFindManyArgs>(args?: SelectSubset<T, GroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
     */
    create<T extends GroupCreateArgs>(args: SelectSubset<T, GroupCreateArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Groups.
     * @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupCreateManyArgs>(args?: SelectSubset<T, GroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Groups and returns the data saved in the database.
     * @param {GroupCreateManyAndReturnArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Groups and only return the `id`
     * const groupWithIdOnly = await prisma.group.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
     */
    delete<T extends GroupDeleteArgs>(args: SelectSubset<T, GroupDeleteArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupUpdateArgs>(args: SelectSubset<T, GroupUpdateArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupDeleteManyArgs>(args?: SelectSubset<T, GroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupUpdateManyArgs>(args: SelectSubset<T, GroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
     */
    upsert<T extends GroupUpsertArgs>(args: SelectSubset<T, GroupUpsertArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Group model
   */
  readonly fields: GroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    torneo<T extends TournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentDefaultArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jugadores<T extends Group$jugadoresArgs<ExtArgs> = {}>(args?: Subset<T, Group$jugadoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Group model
   */ 
  interface GroupFieldRefs {
    readonly id: FieldRef<"Group", 'Int'>
    readonly torneoId: FieldRef<"Group", 'Int'>
    readonly nombre: FieldRef<"Group", 'String'>
    readonly createdAt: FieldRef<"Group", 'DateTime'>
    readonly updatedAt: FieldRef<"Group", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Group findUnique
   */
  export type GroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findFirst
   */
  export type GroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findMany
   */
  export type GroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group create
   */
  export type GroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to create a Group.
     */
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }

  /**
   * Group createMany
   */
  export type GroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Group createManyAndReturn
   */
  export type GroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Group update
   */
  export type GroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to update a Group.
     */
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
  }

  /**
   * Group upsert
   */
  export type GroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The filter to search for the Group to update in case it exists.
     */
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     */
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }

  /**
   * Group delete
   */
  export type GroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter which Group to delete.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupWhereInput
  }

  /**
   * Group.jugadores
   */
  export type Group$jugadoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Group without action
   */
  export type GroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
  }


  /**
   * Model TournamentResult
   */

  export type AggregateTournamentResult = {
    _count: TournamentResultCountAggregateOutputType | null
    _avg: TournamentResultAvgAggregateOutputType | null
    _sum: TournamentResultSumAggregateOutputType | null
    _min: TournamentResultMinAggregateOutputType | null
    _max: TournamentResultMaxAggregateOutputType | null
  }

  export type TournamentResultAvgAggregateOutputType = {
    id: number | null
    torneoId: number | null
    jugadorId: number | null
    posicionFinal: number | null
    puntosGanados: number | null
  }

  export type TournamentResultSumAggregateOutputType = {
    id: number | null
    torneoId: number | null
    jugadorId: number | null
    posicionFinal: number | null
    puntosGanados: number | null
  }

  export type TournamentResultMinAggregateOutputType = {
    id: number | null
    torneoId: number | null
    jugadorId: number | null
    posicionFinal: number | null
    puntosGanados: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentResultMaxAggregateOutputType = {
    id: number | null
    torneoId: number | null
    jugadorId: number | null
    posicionFinal: number | null
    puntosGanados: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentResultCountAggregateOutputType = {
    id: number
    torneoId: number
    jugadorId: number
    posicionFinal: number
    puntosGanados: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TournamentResultAvgAggregateInputType = {
    id?: true
    torneoId?: true
    jugadorId?: true
    posicionFinal?: true
    puntosGanados?: true
  }

  export type TournamentResultSumAggregateInputType = {
    id?: true
    torneoId?: true
    jugadorId?: true
    posicionFinal?: true
    puntosGanados?: true
  }

  export type TournamentResultMinAggregateInputType = {
    id?: true
    torneoId?: true
    jugadorId?: true
    posicionFinal?: true
    puntosGanados?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentResultMaxAggregateInputType = {
    id?: true
    torneoId?: true
    jugadorId?: true
    posicionFinal?: true
    puntosGanados?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentResultCountAggregateInputType = {
    id?: true
    torneoId?: true
    jugadorId?: true
    posicionFinal?: true
    puntosGanados?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TournamentResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentResult to aggregate.
     */
    where?: TournamentResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentResults to fetch.
     */
    orderBy?: TournamentResultOrderByWithRelationInput | TournamentResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TournamentResults
    **/
    _count?: true | TournamentResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentResultMaxAggregateInputType
  }

  export type GetTournamentResultAggregateType<T extends TournamentResultAggregateArgs> = {
        [P in keyof T & keyof AggregateTournamentResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournamentResult[P]>
      : GetScalarType<T[P], AggregateTournamentResult[P]>
  }




  export type TournamentResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentResultWhereInput
    orderBy?: TournamentResultOrderByWithAggregationInput | TournamentResultOrderByWithAggregationInput[]
    by: TournamentResultScalarFieldEnum[] | TournamentResultScalarFieldEnum
    having?: TournamentResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentResultCountAggregateInputType | true
    _avg?: TournamentResultAvgAggregateInputType
    _sum?: TournamentResultSumAggregateInputType
    _min?: TournamentResultMinAggregateInputType
    _max?: TournamentResultMaxAggregateInputType
  }

  export type TournamentResultGroupByOutputType = {
    id: number
    torneoId: number
    jugadorId: number
    posicionFinal: number
    puntosGanados: number
    createdAt: Date
    updatedAt: Date
    _count: TournamentResultCountAggregateOutputType | null
    _avg: TournamentResultAvgAggregateOutputType | null
    _sum: TournamentResultSumAggregateOutputType | null
    _min: TournamentResultMinAggregateOutputType | null
    _max: TournamentResultMaxAggregateOutputType | null
  }

  type GetTournamentResultGroupByPayload<T extends TournamentResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentResultGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentResultGroupByOutputType[P]>
        }
      >
    >


  export type TournamentResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    torneoId?: boolean
    jugadorId?: boolean
    posicionFinal?: boolean
    puntosGanados?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    torneo?: boolean | TournamentDefaultArgs<ExtArgs>
    jugador?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentResult"]>

  export type TournamentResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    torneoId?: boolean
    jugadorId?: boolean
    posicionFinal?: boolean
    puntosGanados?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    torneo?: boolean | TournamentDefaultArgs<ExtArgs>
    jugador?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentResult"]>

  export type TournamentResultSelectScalar = {
    id?: boolean
    torneoId?: boolean
    jugadorId?: boolean
    posicionFinal?: boolean
    puntosGanados?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TournamentResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    torneo?: boolean | TournamentDefaultArgs<ExtArgs>
    jugador?: boolean | PlayerDefaultArgs<ExtArgs>
  }
  export type TournamentResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    torneo?: boolean | TournamentDefaultArgs<ExtArgs>
    jugador?: boolean | PlayerDefaultArgs<ExtArgs>
  }

  export type $TournamentResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TournamentResult"
    objects: {
      torneo: Prisma.$TournamentPayload<ExtArgs>
      jugador: Prisma.$PlayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      torneoId: number
      jugadorId: number
      posicionFinal: number
      puntosGanados: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tournamentResult"]>
    composites: {}
  }

  type TournamentResultGetPayload<S extends boolean | null | undefined | TournamentResultDefaultArgs> = $Result.GetResult<Prisma.$TournamentResultPayload, S>

  type TournamentResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TournamentResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TournamentResultCountAggregateInputType | true
    }

  export interface TournamentResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentResult'], meta: { name: 'TournamentResult' } }
    /**
     * Find zero or one TournamentResult that matches the filter.
     * @param {TournamentResultFindUniqueArgs} args - Arguments to find a TournamentResult
     * @example
     * // Get one TournamentResult
     * const tournamentResult = await prisma.tournamentResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentResultFindUniqueArgs>(args: SelectSubset<T, TournamentResultFindUniqueArgs<ExtArgs>>): Prisma__TournamentResultClient<$Result.GetResult<Prisma.$TournamentResultPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TournamentResult that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TournamentResultFindUniqueOrThrowArgs} args - Arguments to find a TournamentResult
     * @example
     * // Get one TournamentResult
     * const tournamentResult = await prisma.tournamentResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentResultFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentResultClient<$Result.GetResult<Prisma.$TournamentResultPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TournamentResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentResultFindFirstArgs} args - Arguments to find a TournamentResult
     * @example
     * // Get one TournamentResult
     * const tournamentResult = await prisma.tournamentResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentResultFindFirstArgs>(args?: SelectSubset<T, TournamentResultFindFirstArgs<ExtArgs>>): Prisma__TournamentResultClient<$Result.GetResult<Prisma.$TournamentResultPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TournamentResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentResultFindFirstOrThrowArgs} args - Arguments to find a TournamentResult
     * @example
     * // Get one TournamentResult
     * const tournamentResult = await prisma.tournamentResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentResultFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentResultClient<$Result.GetResult<Prisma.$TournamentResultPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TournamentResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TournamentResults
     * const tournamentResults = await prisma.tournamentResult.findMany()
     * 
     * // Get first 10 TournamentResults
     * const tournamentResults = await prisma.tournamentResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentResultWithIdOnly = await prisma.tournamentResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentResultFindManyArgs>(args?: SelectSubset<T, TournamentResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentResultPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TournamentResult.
     * @param {TournamentResultCreateArgs} args - Arguments to create a TournamentResult.
     * @example
     * // Create one TournamentResult
     * const TournamentResult = await prisma.tournamentResult.create({
     *   data: {
     *     // ... data to create a TournamentResult
     *   }
     * })
     * 
     */
    create<T extends TournamentResultCreateArgs>(args: SelectSubset<T, TournamentResultCreateArgs<ExtArgs>>): Prisma__TournamentResultClient<$Result.GetResult<Prisma.$TournamentResultPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TournamentResults.
     * @param {TournamentResultCreateManyArgs} args - Arguments to create many TournamentResults.
     * @example
     * // Create many TournamentResults
     * const tournamentResult = await prisma.tournamentResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentResultCreateManyArgs>(args?: SelectSubset<T, TournamentResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TournamentResults and returns the data saved in the database.
     * @param {TournamentResultCreateManyAndReturnArgs} args - Arguments to create many TournamentResults.
     * @example
     * // Create many TournamentResults
     * const tournamentResult = await prisma.tournamentResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TournamentResults and only return the `id`
     * const tournamentResultWithIdOnly = await prisma.tournamentResult.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentResultCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentResultPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TournamentResult.
     * @param {TournamentResultDeleteArgs} args - Arguments to delete one TournamentResult.
     * @example
     * // Delete one TournamentResult
     * const TournamentResult = await prisma.tournamentResult.delete({
     *   where: {
     *     // ... filter to delete one TournamentResult
     *   }
     * })
     * 
     */
    delete<T extends TournamentResultDeleteArgs>(args: SelectSubset<T, TournamentResultDeleteArgs<ExtArgs>>): Prisma__TournamentResultClient<$Result.GetResult<Prisma.$TournamentResultPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TournamentResult.
     * @param {TournamentResultUpdateArgs} args - Arguments to update one TournamentResult.
     * @example
     * // Update one TournamentResult
     * const tournamentResult = await prisma.tournamentResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentResultUpdateArgs>(args: SelectSubset<T, TournamentResultUpdateArgs<ExtArgs>>): Prisma__TournamentResultClient<$Result.GetResult<Prisma.$TournamentResultPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TournamentResults.
     * @param {TournamentResultDeleteManyArgs} args - Arguments to filter TournamentResults to delete.
     * @example
     * // Delete a few TournamentResults
     * const { count } = await prisma.tournamentResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentResultDeleteManyArgs>(args?: SelectSubset<T, TournamentResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TournamentResults
     * const tournamentResult = await prisma.tournamentResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentResultUpdateManyArgs>(args: SelectSubset<T, TournamentResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TournamentResult.
     * @param {TournamentResultUpsertArgs} args - Arguments to update or create a TournamentResult.
     * @example
     * // Update or create a TournamentResult
     * const tournamentResult = await prisma.tournamentResult.upsert({
     *   create: {
     *     // ... data to create a TournamentResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TournamentResult we want to update
     *   }
     * })
     */
    upsert<T extends TournamentResultUpsertArgs>(args: SelectSubset<T, TournamentResultUpsertArgs<ExtArgs>>): Prisma__TournamentResultClient<$Result.GetResult<Prisma.$TournamentResultPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TournamentResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentResultCountArgs} args - Arguments to filter TournamentResults to count.
     * @example
     * // Count the number of TournamentResults
     * const count = await prisma.tournamentResult.count({
     *   where: {
     *     // ... the filter for the TournamentResults we want to count
     *   }
     * })
    **/
    count<T extends TournamentResultCountArgs>(
      args?: Subset<T, TournamentResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TournamentResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentResultAggregateArgs>(args: Subset<T, TournamentResultAggregateArgs>): Prisma.PrismaPromise<GetTournamentResultAggregateType<T>>

    /**
     * Group by TournamentResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentResultGroupByArgs['orderBy'] }
        : { orderBy?: TournamentResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TournamentResult model
   */
  readonly fields: TournamentResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TournamentResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    torneo<T extends TournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentDefaultArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jugador<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TournamentResult model
   */ 
  interface TournamentResultFieldRefs {
    readonly id: FieldRef<"TournamentResult", 'Int'>
    readonly torneoId: FieldRef<"TournamentResult", 'Int'>
    readonly jugadorId: FieldRef<"TournamentResult", 'Int'>
    readonly posicionFinal: FieldRef<"TournamentResult", 'Int'>
    readonly puntosGanados: FieldRef<"TournamentResult", 'Int'>
    readonly createdAt: FieldRef<"TournamentResult", 'DateTime'>
    readonly updatedAt: FieldRef<"TournamentResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TournamentResult findUnique
   */
  export type TournamentResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultInclude<ExtArgs> | null
    /**
     * Filter, which TournamentResult to fetch.
     */
    where: TournamentResultWhereUniqueInput
  }

  /**
   * TournamentResult findUniqueOrThrow
   */
  export type TournamentResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultInclude<ExtArgs> | null
    /**
     * Filter, which TournamentResult to fetch.
     */
    where: TournamentResultWhereUniqueInput
  }

  /**
   * TournamentResult findFirst
   */
  export type TournamentResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultInclude<ExtArgs> | null
    /**
     * Filter, which TournamentResult to fetch.
     */
    where?: TournamentResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentResults to fetch.
     */
    orderBy?: TournamentResultOrderByWithRelationInput | TournamentResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentResults.
     */
    cursor?: TournamentResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentResults.
     */
    distinct?: TournamentResultScalarFieldEnum | TournamentResultScalarFieldEnum[]
  }

  /**
   * TournamentResult findFirstOrThrow
   */
  export type TournamentResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultInclude<ExtArgs> | null
    /**
     * Filter, which TournamentResult to fetch.
     */
    where?: TournamentResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentResults to fetch.
     */
    orderBy?: TournamentResultOrderByWithRelationInput | TournamentResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentResults.
     */
    cursor?: TournamentResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentResults.
     */
    distinct?: TournamentResultScalarFieldEnum | TournamentResultScalarFieldEnum[]
  }

  /**
   * TournamentResult findMany
   */
  export type TournamentResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultInclude<ExtArgs> | null
    /**
     * Filter, which TournamentResults to fetch.
     */
    where?: TournamentResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentResults to fetch.
     */
    orderBy?: TournamentResultOrderByWithRelationInput | TournamentResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TournamentResults.
     */
    cursor?: TournamentResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentResults.
     */
    skip?: number
    distinct?: TournamentResultScalarFieldEnum | TournamentResultScalarFieldEnum[]
  }

  /**
   * TournamentResult create
   */
  export type TournamentResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultInclude<ExtArgs> | null
    /**
     * The data needed to create a TournamentResult.
     */
    data: XOR<TournamentResultCreateInput, TournamentResultUncheckedCreateInput>
  }

  /**
   * TournamentResult createMany
   */
  export type TournamentResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TournamentResults.
     */
    data: TournamentResultCreateManyInput | TournamentResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TournamentResult createManyAndReturn
   */
  export type TournamentResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TournamentResults.
     */
    data: TournamentResultCreateManyInput | TournamentResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TournamentResult update
   */
  export type TournamentResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultInclude<ExtArgs> | null
    /**
     * The data needed to update a TournamentResult.
     */
    data: XOR<TournamentResultUpdateInput, TournamentResultUncheckedUpdateInput>
    /**
     * Choose, which TournamentResult to update.
     */
    where: TournamentResultWhereUniqueInput
  }

  /**
   * TournamentResult updateMany
   */
  export type TournamentResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TournamentResults.
     */
    data: XOR<TournamentResultUpdateManyMutationInput, TournamentResultUncheckedUpdateManyInput>
    /**
     * Filter which TournamentResults to update
     */
    where?: TournamentResultWhereInput
  }

  /**
   * TournamentResult upsert
   */
  export type TournamentResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultInclude<ExtArgs> | null
    /**
     * The filter to search for the TournamentResult to update in case it exists.
     */
    where: TournamentResultWhereUniqueInput
    /**
     * In case the TournamentResult found by the `where` argument doesn't exist, create a new TournamentResult with this data.
     */
    create: XOR<TournamentResultCreateInput, TournamentResultUncheckedCreateInput>
    /**
     * In case the TournamentResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentResultUpdateInput, TournamentResultUncheckedUpdateInput>
  }

  /**
   * TournamentResult delete
   */
  export type TournamentResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultInclude<ExtArgs> | null
    /**
     * Filter which TournamentResult to delete.
     */
    where: TournamentResultWhereUniqueInput
  }

  /**
   * TournamentResult deleteMany
   */
  export type TournamentResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentResults to delete
     */
    where?: TournamentResultWhereInput
  }

  /**
   * TournamentResult without action
   */
  export type TournamentResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentResult
     */
    select?: TournamentResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentResultInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    ranking: 'ranking',
    puntos: 'puntos',
    email: 'email',
    password: 'password',
    role: 'role',
    telefono: 'telefono',
    fechaNacimiento: 'fechaNacimiento',
    activo: 'activo',
    fechaBaja: 'fechaBaja',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const TournamentScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    tipo: 'tipo',
    setsPorPartido: 'setsPorPartido',
    fechaInicio: 'fechaInicio',
    fechaFin: 'fechaFin',
    maxJugadores: 'maxJugadores',
    puntosPorSet: 'puntosPorSet',
    descripcion: 'descripcion',
    estado: 'estado',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TournamentScalarFieldEnum = (typeof TournamentScalarFieldEnum)[keyof typeof TournamentScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    torneoId: 'torneoId',
    jugador1Id: 'jugador1Id',
    jugador2Id: 'jugador2Id',
    ganadorId: 'ganadorId',
    setsJ1: 'setsJ1',
    setsJ2: 'setsJ2',
    ronda: 'ronda',
    fase: 'fase',
    estado: 'estado',
    fecha: 'fecha',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const SetScalarFieldEnum: {
    id: 'id',
    partidoId: 'partidoId',
    numeroSet: 'numeroSet',
    puntosJ1: 'puntosJ1',
    puntosJ2: 'puntosJ2',
    ganadorId: 'ganadorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SetScalarFieldEnum = (typeof SetScalarFieldEnum)[keyof typeof SetScalarFieldEnum]


  export const GroupScalarFieldEnum: {
    id: 'id',
    torneoId: 'torneoId',
    nombre: 'nombre',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const TournamentResultScalarFieldEnum: {
    id: 'id',
    torneoId: 'torneoId',
    jugadorId: 'jugadorId',
    posicionFinal: 'posicionFinal',
    puntosGanados: 'puntosGanados',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TournamentResultScalarFieldEnum = (typeof TournamentResultScalarFieldEnum)[keyof typeof TournamentResultScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: IntFilter<"Player"> | number
    nombre?: StringFilter<"Player"> | string
    ranking?: IntFilter<"Player"> | number
    puntos?: IntFilter<"Player"> | number
    email?: StringFilter<"Player"> | string
    password?: StringFilter<"Player"> | string
    role?: StringFilter<"Player"> | string
    telefono?: StringNullableFilter<"Player"> | string | null
    fechaNacimiento?: DateTimeNullableFilter<"Player"> | Date | string | null
    activo?: BoolFilter<"Player"> | boolean
    fechaBaja?: DateTimeNullableFilter<"Player"> | Date | string | null
    createdAt?: DateTimeFilter<"Player"> | Date | string
    updatedAt?: DateTimeFilter<"Player"> | Date | string
    matches1?: MatchListRelationFilter
    matches2?: MatchListRelationFilter
    matchesGanados?: MatchListRelationFilter
    tournamentResults?: TournamentResultListRelationFilter
    groups?: GroupListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    ranking?: SortOrder
    puntos?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    telefono?: SortOrderInput | SortOrder
    fechaNacimiento?: SortOrderInput | SortOrder
    activo?: SortOrder
    fechaBaja?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    matches1?: MatchOrderByRelationAggregateInput
    matches2?: MatchOrderByRelationAggregateInput
    matchesGanados?: MatchOrderByRelationAggregateInput
    tournamentResults?: TournamentResultOrderByRelationAggregateInput
    groups?: GroupOrderByRelationAggregateInput
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    nombre?: StringFilter<"Player"> | string
    ranking?: IntFilter<"Player"> | number
    puntos?: IntFilter<"Player"> | number
    password?: StringFilter<"Player"> | string
    role?: StringFilter<"Player"> | string
    telefono?: StringNullableFilter<"Player"> | string | null
    fechaNacimiento?: DateTimeNullableFilter<"Player"> | Date | string | null
    activo?: BoolFilter<"Player"> | boolean
    fechaBaja?: DateTimeNullableFilter<"Player"> | Date | string | null
    createdAt?: DateTimeFilter<"Player"> | Date | string
    updatedAt?: DateTimeFilter<"Player"> | Date | string
    matches1?: MatchListRelationFilter
    matches2?: MatchListRelationFilter
    matchesGanados?: MatchListRelationFilter
    tournamentResults?: TournamentResultListRelationFilter
    groups?: GroupListRelationFilter
  }, "id" | "email">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    ranking?: SortOrder
    puntos?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    telefono?: SortOrderInput | SortOrder
    fechaNacimiento?: SortOrderInput | SortOrder
    activo?: SortOrder
    fechaBaja?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Player"> | number
    nombre?: StringWithAggregatesFilter<"Player"> | string
    ranking?: IntWithAggregatesFilter<"Player"> | number
    puntos?: IntWithAggregatesFilter<"Player"> | number
    email?: StringWithAggregatesFilter<"Player"> | string
    password?: StringWithAggregatesFilter<"Player"> | string
    role?: StringWithAggregatesFilter<"Player"> | string
    telefono?: StringNullableWithAggregatesFilter<"Player"> | string | null
    fechaNacimiento?: DateTimeNullableWithAggregatesFilter<"Player"> | Date | string | null
    activo?: BoolWithAggregatesFilter<"Player"> | boolean
    fechaBaja?: DateTimeNullableWithAggregatesFilter<"Player"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Player"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Player"> | Date | string
  }

  export type TournamentWhereInput = {
    AND?: TournamentWhereInput | TournamentWhereInput[]
    OR?: TournamentWhereInput[]
    NOT?: TournamentWhereInput | TournamentWhereInput[]
    id?: IntFilter<"Tournament"> | number
    nombre?: StringFilter<"Tournament"> | string
    tipo?: StringFilter<"Tournament"> | string
    setsPorPartido?: IntFilter<"Tournament"> | number
    fechaInicio?: DateTimeFilter<"Tournament"> | Date | string
    fechaFin?: DateTimeNullableFilter<"Tournament"> | Date | string | null
    maxJugadores?: IntFilter<"Tournament"> | number
    puntosPorSet?: IntFilter<"Tournament"> | number
    descripcion?: StringNullableFilter<"Tournament"> | string | null
    estado?: StringFilter<"Tournament"> | string
    createdAt?: DateTimeFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeFilter<"Tournament"> | Date | string
    matches?: MatchListRelationFilter
    groups?: GroupListRelationFilter
    tournamentResults?: TournamentResultListRelationFilter
  }

  export type TournamentOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    setsPorPartido?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrderInput | SortOrder
    maxJugadores?: SortOrder
    puntosPorSet?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    matches?: MatchOrderByRelationAggregateInput
    groups?: GroupOrderByRelationAggregateInput
    tournamentResults?: TournamentResultOrderByRelationAggregateInput
  }

  export type TournamentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TournamentWhereInput | TournamentWhereInput[]
    OR?: TournamentWhereInput[]
    NOT?: TournamentWhereInput | TournamentWhereInput[]
    nombre?: StringFilter<"Tournament"> | string
    tipo?: StringFilter<"Tournament"> | string
    setsPorPartido?: IntFilter<"Tournament"> | number
    fechaInicio?: DateTimeFilter<"Tournament"> | Date | string
    fechaFin?: DateTimeNullableFilter<"Tournament"> | Date | string | null
    maxJugadores?: IntFilter<"Tournament"> | number
    puntosPorSet?: IntFilter<"Tournament"> | number
    descripcion?: StringNullableFilter<"Tournament"> | string | null
    estado?: StringFilter<"Tournament"> | string
    createdAt?: DateTimeFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeFilter<"Tournament"> | Date | string
    matches?: MatchListRelationFilter
    groups?: GroupListRelationFilter
    tournamentResults?: TournamentResultListRelationFilter
  }, "id">

  export type TournamentOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    setsPorPartido?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrderInput | SortOrder
    maxJugadores?: SortOrder
    puntosPorSet?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TournamentCountOrderByAggregateInput
    _avg?: TournamentAvgOrderByAggregateInput
    _max?: TournamentMaxOrderByAggregateInput
    _min?: TournamentMinOrderByAggregateInput
    _sum?: TournamentSumOrderByAggregateInput
  }

  export type TournamentScalarWhereWithAggregatesInput = {
    AND?: TournamentScalarWhereWithAggregatesInput | TournamentScalarWhereWithAggregatesInput[]
    OR?: TournamentScalarWhereWithAggregatesInput[]
    NOT?: TournamentScalarWhereWithAggregatesInput | TournamentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tournament"> | number
    nombre?: StringWithAggregatesFilter<"Tournament"> | string
    tipo?: StringWithAggregatesFilter<"Tournament"> | string
    setsPorPartido?: IntWithAggregatesFilter<"Tournament"> | number
    fechaInicio?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
    fechaFin?: DateTimeNullableWithAggregatesFilter<"Tournament"> | Date | string | null
    maxJugadores?: IntWithAggregatesFilter<"Tournament"> | number
    puntosPorSet?: IntWithAggregatesFilter<"Tournament"> | number
    descripcion?: StringNullableWithAggregatesFilter<"Tournament"> | string | null
    estado?: StringWithAggregatesFilter<"Tournament"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
  }

  export type MatchWhereInput = {
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    id?: IntFilter<"Match"> | number
    torneoId?: IntFilter<"Match"> | number
    jugador1Id?: IntFilter<"Match"> | number
    jugador2Id?: IntFilter<"Match"> | number
    ganadorId?: IntNullableFilter<"Match"> | number | null
    setsJ1?: IntFilter<"Match"> | number
    setsJ2?: IntFilter<"Match"> | number
    ronda?: IntFilter<"Match"> | number
    fase?: StringFilter<"Match"> | string
    estado?: StringFilter<"Match"> | string
    fecha?: DateTimeNullableFilter<"Match"> | Date | string | null
    createdAt?: DateTimeFilter<"Match"> | Date | string
    updatedAt?: DateTimeFilter<"Match"> | Date | string
    torneo?: XOR<TournamentRelationFilter, TournamentWhereInput>
    jugador1?: XOR<PlayerRelationFilter, PlayerWhereInput>
    jugador2?: XOR<PlayerRelationFilter, PlayerWhereInput>
    ganador?: XOR<PlayerNullableRelationFilter, PlayerWhereInput> | null
    sets?: SetListRelationFilter
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    ganadorId?: SortOrderInput | SortOrder
    setsJ1?: SortOrder
    setsJ2?: SortOrder
    ronda?: SortOrder
    fase?: SortOrder
    estado?: SortOrder
    fecha?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    torneo?: TournamentOrderByWithRelationInput
    jugador1?: PlayerOrderByWithRelationInput
    jugador2?: PlayerOrderByWithRelationInput
    ganador?: PlayerOrderByWithRelationInput
    sets?: SetOrderByRelationAggregateInput
  }

  export type MatchWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    torneoId?: IntFilter<"Match"> | number
    jugador1Id?: IntFilter<"Match"> | number
    jugador2Id?: IntFilter<"Match"> | number
    ganadorId?: IntNullableFilter<"Match"> | number | null
    setsJ1?: IntFilter<"Match"> | number
    setsJ2?: IntFilter<"Match"> | number
    ronda?: IntFilter<"Match"> | number
    fase?: StringFilter<"Match"> | string
    estado?: StringFilter<"Match"> | string
    fecha?: DateTimeNullableFilter<"Match"> | Date | string | null
    createdAt?: DateTimeFilter<"Match"> | Date | string
    updatedAt?: DateTimeFilter<"Match"> | Date | string
    torneo?: XOR<TournamentRelationFilter, TournamentWhereInput>
    jugador1?: XOR<PlayerRelationFilter, PlayerWhereInput>
    jugador2?: XOR<PlayerRelationFilter, PlayerWhereInput>
    ganador?: XOR<PlayerNullableRelationFilter, PlayerWhereInput> | null
    sets?: SetListRelationFilter
  }, "id">

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    ganadorId?: SortOrderInput | SortOrder
    setsJ1?: SortOrder
    setsJ2?: SortOrder
    ronda?: SortOrder
    fase?: SortOrder
    estado?: SortOrder
    fecha?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _avg?: MatchAvgOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
    _sum?: MatchSumOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    OR?: MatchScalarWhereWithAggregatesInput[]
    NOT?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Match"> | number
    torneoId?: IntWithAggregatesFilter<"Match"> | number
    jugador1Id?: IntWithAggregatesFilter<"Match"> | number
    jugador2Id?: IntWithAggregatesFilter<"Match"> | number
    ganadorId?: IntNullableWithAggregatesFilter<"Match"> | number | null
    setsJ1?: IntWithAggregatesFilter<"Match"> | number
    setsJ2?: IntWithAggregatesFilter<"Match"> | number
    ronda?: IntWithAggregatesFilter<"Match"> | number
    fase?: StringWithAggregatesFilter<"Match"> | string
    estado?: StringWithAggregatesFilter<"Match"> | string
    fecha?: DateTimeNullableWithAggregatesFilter<"Match"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Match"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Match"> | Date | string
  }

  export type SetWhereInput = {
    AND?: SetWhereInput | SetWhereInput[]
    OR?: SetWhereInput[]
    NOT?: SetWhereInput | SetWhereInput[]
    id?: IntFilter<"Set"> | number
    partidoId?: IntFilter<"Set"> | number
    numeroSet?: IntFilter<"Set"> | number
    puntosJ1?: IntFilter<"Set"> | number
    puntosJ2?: IntFilter<"Set"> | number
    ganadorId?: IntNullableFilter<"Set"> | number | null
    createdAt?: DateTimeFilter<"Set"> | Date | string
    updatedAt?: DateTimeFilter<"Set"> | Date | string
    partido?: XOR<MatchRelationFilter, MatchWhereInput>
  }

  export type SetOrderByWithRelationInput = {
    id?: SortOrder
    partidoId?: SortOrder
    numeroSet?: SortOrder
    puntosJ1?: SortOrder
    puntosJ2?: SortOrder
    ganadorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    partido?: MatchOrderByWithRelationInput
  }

  export type SetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    partidoId_numeroSet?: SetPartidoIdNumeroSetCompoundUniqueInput
    AND?: SetWhereInput | SetWhereInput[]
    OR?: SetWhereInput[]
    NOT?: SetWhereInput | SetWhereInput[]
    partidoId?: IntFilter<"Set"> | number
    numeroSet?: IntFilter<"Set"> | number
    puntosJ1?: IntFilter<"Set"> | number
    puntosJ2?: IntFilter<"Set"> | number
    ganadorId?: IntNullableFilter<"Set"> | number | null
    createdAt?: DateTimeFilter<"Set"> | Date | string
    updatedAt?: DateTimeFilter<"Set"> | Date | string
    partido?: XOR<MatchRelationFilter, MatchWhereInput>
  }, "id" | "partidoId_numeroSet">

  export type SetOrderByWithAggregationInput = {
    id?: SortOrder
    partidoId?: SortOrder
    numeroSet?: SortOrder
    puntosJ1?: SortOrder
    puntosJ2?: SortOrder
    ganadorId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SetCountOrderByAggregateInput
    _avg?: SetAvgOrderByAggregateInput
    _max?: SetMaxOrderByAggregateInput
    _min?: SetMinOrderByAggregateInput
    _sum?: SetSumOrderByAggregateInput
  }

  export type SetScalarWhereWithAggregatesInput = {
    AND?: SetScalarWhereWithAggregatesInput | SetScalarWhereWithAggregatesInput[]
    OR?: SetScalarWhereWithAggregatesInput[]
    NOT?: SetScalarWhereWithAggregatesInput | SetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Set"> | number
    partidoId?: IntWithAggregatesFilter<"Set"> | number
    numeroSet?: IntWithAggregatesFilter<"Set"> | number
    puntosJ1?: IntWithAggregatesFilter<"Set"> | number
    puntosJ2?: IntWithAggregatesFilter<"Set"> | number
    ganadorId?: IntNullableWithAggregatesFilter<"Set"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Set"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Set"> | Date | string
  }

  export type GroupWhereInput = {
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    id?: IntFilter<"Group"> | number
    torneoId?: IntFilter<"Group"> | number
    nombre?: StringFilter<"Group"> | string
    createdAt?: DateTimeFilter<"Group"> | Date | string
    updatedAt?: DateTimeFilter<"Group"> | Date | string
    torneo?: XOR<TournamentRelationFilter, TournamentWhereInput>
    jugadores?: PlayerListRelationFilter
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    torneoId?: SortOrder
    nombre?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    torneo?: TournamentOrderByWithRelationInput
    jugadores?: PlayerOrderByRelationAggregateInput
  }

  export type GroupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    torneoId?: IntFilter<"Group"> | number
    nombre?: StringFilter<"Group"> | string
    createdAt?: DateTimeFilter<"Group"> | Date | string
    updatedAt?: DateTimeFilter<"Group"> | Date | string
    torneo?: XOR<TournamentRelationFilter, TournamentWhereInput>
    jugadores?: PlayerListRelationFilter
  }, "id">

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    torneoId?: SortOrder
    nombre?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GroupCountOrderByAggregateInput
    _avg?: GroupAvgOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
    _sum?: GroupSumOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    OR?: GroupScalarWhereWithAggregatesInput[]
    NOT?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Group"> | number
    torneoId?: IntWithAggregatesFilter<"Group"> | number
    nombre?: StringWithAggregatesFilter<"Group"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Group"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Group"> | Date | string
  }

  export type TournamentResultWhereInput = {
    AND?: TournamentResultWhereInput | TournamentResultWhereInput[]
    OR?: TournamentResultWhereInput[]
    NOT?: TournamentResultWhereInput | TournamentResultWhereInput[]
    id?: IntFilter<"TournamentResult"> | number
    torneoId?: IntFilter<"TournamentResult"> | number
    jugadorId?: IntFilter<"TournamentResult"> | number
    posicionFinal?: IntFilter<"TournamentResult"> | number
    puntosGanados?: IntFilter<"TournamentResult"> | number
    createdAt?: DateTimeFilter<"TournamentResult"> | Date | string
    updatedAt?: DateTimeFilter<"TournamentResult"> | Date | string
    torneo?: XOR<TournamentRelationFilter, TournamentWhereInput>
    jugador?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }

  export type TournamentResultOrderByWithRelationInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugadorId?: SortOrder
    posicionFinal?: SortOrder
    puntosGanados?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    torneo?: TournamentOrderByWithRelationInput
    jugador?: PlayerOrderByWithRelationInput
  }

  export type TournamentResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    torneoId_jugadorId?: TournamentResultTorneoIdJugadorIdCompoundUniqueInput
    AND?: TournamentResultWhereInput | TournamentResultWhereInput[]
    OR?: TournamentResultWhereInput[]
    NOT?: TournamentResultWhereInput | TournamentResultWhereInput[]
    torneoId?: IntFilter<"TournamentResult"> | number
    jugadorId?: IntFilter<"TournamentResult"> | number
    posicionFinal?: IntFilter<"TournamentResult"> | number
    puntosGanados?: IntFilter<"TournamentResult"> | number
    createdAt?: DateTimeFilter<"TournamentResult"> | Date | string
    updatedAt?: DateTimeFilter<"TournamentResult"> | Date | string
    torneo?: XOR<TournamentRelationFilter, TournamentWhereInput>
    jugador?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }, "id" | "torneoId_jugadorId">

  export type TournamentResultOrderByWithAggregationInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugadorId?: SortOrder
    posicionFinal?: SortOrder
    puntosGanados?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TournamentResultCountOrderByAggregateInput
    _avg?: TournamentResultAvgOrderByAggregateInput
    _max?: TournamentResultMaxOrderByAggregateInput
    _min?: TournamentResultMinOrderByAggregateInput
    _sum?: TournamentResultSumOrderByAggregateInput
  }

  export type TournamentResultScalarWhereWithAggregatesInput = {
    AND?: TournamentResultScalarWhereWithAggregatesInput | TournamentResultScalarWhereWithAggregatesInput[]
    OR?: TournamentResultScalarWhereWithAggregatesInput[]
    NOT?: TournamentResultScalarWhereWithAggregatesInput | TournamentResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TournamentResult"> | number
    torneoId?: IntWithAggregatesFilter<"TournamentResult"> | number
    jugadorId?: IntWithAggregatesFilter<"TournamentResult"> | number
    posicionFinal?: IntWithAggregatesFilter<"TournamentResult"> | number
    puntosGanados?: IntWithAggregatesFilter<"TournamentResult"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TournamentResult"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TournamentResult"> | Date | string
  }

  export type PlayerCreateInput = {
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches1?: MatchCreateNestedManyWithoutJugador1Input
    matches2?: MatchCreateNestedManyWithoutJugador2Input
    matchesGanados?: MatchCreateNestedManyWithoutGanadorInput
    tournamentResults?: TournamentResultCreateNestedManyWithoutJugadorInput
    groups?: GroupCreateNestedManyWithoutJugadoresInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: number
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches1?: MatchUncheckedCreateNestedManyWithoutJugador1Input
    matches2?: MatchUncheckedCreateNestedManyWithoutJugador2Input
    matchesGanados?: MatchUncheckedCreateNestedManyWithoutGanadorInput
    tournamentResults?: TournamentResultUncheckedCreateNestedManyWithoutJugadorInput
    groups?: GroupUncheckedCreateNestedManyWithoutJugadoresInput
  }

  export type PlayerUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches1?: MatchUpdateManyWithoutJugador1NestedInput
    matches2?: MatchUpdateManyWithoutJugador2NestedInput
    matchesGanados?: MatchUpdateManyWithoutGanadorNestedInput
    tournamentResults?: TournamentResultUpdateManyWithoutJugadorNestedInput
    groups?: GroupUpdateManyWithoutJugadoresNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches1?: MatchUncheckedUpdateManyWithoutJugador1NestedInput
    matches2?: MatchUncheckedUpdateManyWithoutJugador2NestedInput
    matchesGanados?: MatchUncheckedUpdateManyWithoutGanadorNestedInput
    tournamentResults?: TournamentResultUncheckedUpdateManyWithoutJugadorNestedInput
    groups?: GroupUncheckedUpdateManyWithoutJugadoresNestedInput
  }

  export type PlayerCreateManyInput = {
    id?: number
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlayerUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentCreateInput = {
    nombre: string
    tipo: string
    setsPorPartido?: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    maxJugadores?: number
    puntosPorSet?: number
    descripcion?: string | null
    estado?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchCreateNestedManyWithoutTorneoInput
    groups?: GroupCreateNestedManyWithoutTorneoInput
    tournamentResults?: TournamentResultCreateNestedManyWithoutTorneoInput
  }

  export type TournamentUncheckedCreateInput = {
    id?: number
    nombre: string
    tipo: string
    setsPorPartido?: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    maxJugadores?: number
    puntosPorSet?: number
    descripcion?: string | null
    estado?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchUncheckedCreateNestedManyWithoutTorneoInput
    groups?: GroupUncheckedCreateNestedManyWithoutTorneoInput
    tournamentResults?: TournamentResultUncheckedCreateNestedManyWithoutTorneoInput
  }

  export type TournamentUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    setsPorPartido?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxJugadores?: IntFieldUpdateOperationsInput | number
    puntosPorSet?: IntFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUpdateManyWithoutTorneoNestedInput
    groups?: GroupUpdateManyWithoutTorneoNestedInput
    tournamentResults?: TournamentResultUpdateManyWithoutTorneoNestedInput
  }

  export type TournamentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    setsPorPartido?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxJugadores?: IntFieldUpdateOperationsInput | number
    puntosPorSet?: IntFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUncheckedUpdateManyWithoutTorneoNestedInput
    groups?: GroupUncheckedUpdateManyWithoutTorneoNestedInput
    tournamentResults?: TournamentResultUncheckedUpdateManyWithoutTorneoNestedInput
  }

  export type TournamentCreateManyInput = {
    id?: number
    nombre: string
    tipo: string
    setsPorPartido?: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    maxJugadores?: number
    puntosPorSet?: number
    descripcion?: string | null
    estado?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    setsPorPartido?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxJugadores?: IntFieldUpdateOperationsInput | number
    puntosPorSet?: IntFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    setsPorPartido?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxJugadores?: IntFieldUpdateOperationsInput | number
    puntosPorSet?: IntFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateInput = {
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    torneo: TournamentCreateNestedOneWithoutMatchesInput
    jugador1: PlayerCreateNestedOneWithoutMatches1Input
    jugador2: PlayerCreateNestedOneWithoutMatches2Input
    ganador?: PlayerCreateNestedOneWithoutMatchesGanadosInput
    sets?: SetCreateNestedManyWithoutPartidoInput
  }

  export type MatchUncheckedCreateInput = {
    id?: number
    torneoId: number
    jugador1Id: number
    jugador2Id: number
    ganadorId?: number | null
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sets?: SetUncheckedCreateNestedManyWithoutPartidoInput
  }

  export type MatchUpdateInput = {
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    torneo?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    jugador1?: PlayerUpdateOneRequiredWithoutMatches1NestedInput
    jugador2?: PlayerUpdateOneRequiredWithoutMatches2NestedInput
    ganador?: PlayerUpdateOneWithoutMatchesGanadosNestedInput
    sets?: SetUpdateManyWithoutPartidoNestedInput
  }

  export type MatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sets?: SetUncheckedUpdateManyWithoutPartidoNestedInput
  }

  export type MatchCreateManyInput = {
    id?: number
    torneoId: number
    jugador1Id: number
    jugador2Id: number
    ganadorId?: number | null
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUpdateManyMutationInput = {
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SetCreateInput = {
    numeroSet: number
    puntosJ1?: number
    puntosJ2?: number
    ganadorId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    partido: MatchCreateNestedOneWithoutSetsInput
  }

  export type SetUncheckedCreateInput = {
    id?: number
    partidoId: number
    numeroSet: number
    puntosJ1?: number
    puntosJ2?: number
    ganadorId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SetUpdateInput = {
    numeroSet?: IntFieldUpdateOperationsInput | number
    puntosJ1?: IntFieldUpdateOperationsInput | number
    puntosJ2?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    partido?: MatchUpdateOneRequiredWithoutSetsNestedInput
  }

  export type SetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    partidoId?: IntFieldUpdateOperationsInput | number
    numeroSet?: IntFieldUpdateOperationsInput | number
    puntosJ1?: IntFieldUpdateOperationsInput | number
    puntosJ2?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SetCreateManyInput = {
    id?: number
    partidoId: number
    numeroSet: number
    puntosJ1?: number
    puntosJ2?: number
    ganadorId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SetUpdateManyMutationInput = {
    numeroSet?: IntFieldUpdateOperationsInput | number
    puntosJ1?: IntFieldUpdateOperationsInput | number
    puntosJ2?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    partidoId?: IntFieldUpdateOperationsInput | number
    numeroSet?: IntFieldUpdateOperationsInput | number
    puntosJ1?: IntFieldUpdateOperationsInput | number
    puntosJ2?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupCreateInput = {
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
    torneo: TournamentCreateNestedOneWithoutGroupsInput
    jugadores?: PlayerCreateNestedManyWithoutGroupsInput
  }

  export type GroupUncheckedCreateInput = {
    id?: number
    torneoId: number
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jugadores?: PlayerUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    torneo?: TournamentUpdateOneRequiredWithoutGroupsNestedInput
    jugadores?: PlayerUpdateManyWithoutGroupsNestedInput
  }

  export type GroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jugadores?: PlayerUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type GroupCreateManyInput = {
    id?: number
    torneoId: number
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentResultCreateInput = {
    posicionFinal: number
    puntosGanados: number
    createdAt?: Date | string
    updatedAt?: Date | string
    torneo: TournamentCreateNestedOneWithoutTournamentResultsInput
    jugador: PlayerCreateNestedOneWithoutTournamentResultsInput
  }

  export type TournamentResultUncheckedCreateInput = {
    id?: number
    torneoId: number
    jugadorId: number
    posicionFinal: number
    puntosGanados: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentResultUpdateInput = {
    posicionFinal?: IntFieldUpdateOperationsInput | number
    puntosGanados?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    torneo?: TournamentUpdateOneRequiredWithoutTournamentResultsNestedInput
    jugador?: PlayerUpdateOneRequiredWithoutTournamentResultsNestedInput
  }

  export type TournamentResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    jugadorId?: IntFieldUpdateOperationsInput | number
    posicionFinal?: IntFieldUpdateOperationsInput | number
    puntosGanados?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentResultCreateManyInput = {
    id?: number
    torneoId: number
    jugadorId: number
    posicionFinal: number
    puntosGanados: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentResultUpdateManyMutationInput = {
    posicionFinal?: IntFieldUpdateOperationsInput | number
    puntosGanados?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    jugadorId?: IntFieldUpdateOperationsInput | number
    posicionFinal?: IntFieldUpdateOperationsInput | number
    puntosGanados?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type TournamentResultListRelationFilter = {
    every?: TournamentResultWhereInput
    some?: TournamentResultWhereInput
    none?: TournamentResultWhereInput
  }

  export type GroupListRelationFilter = {
    every?: GroupWhereInput
    some?: GroupWhereInput
    none?: GroupWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    ranking?: SortOrder
    puntos?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    telefono?: SortOrder
    fechaNacimiento?: SortOrder
    activo?: SortOrder
    fechaBaja?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    id?: SortOrder
    ranking?: SortOrder
    puntos?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    ranking?: SortOrder
    puntos?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    telefono?: SortOrder
    fechaNacimiento?: SortOrder
    activo?: SortOrder
    fechaBaja?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    ranking?: SortOrder
    puntos?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    telefono?: SortOrder
    fechaNacimiento?: SortOrder
    activo?: SortOrder
    fechaBaja?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    id?: SortOrder
    ranking?: SortOrder
    puntos?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type TournamentCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    setsPorPartido?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    maxJugadores?: SortOrder
    puntosPorSet?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentAvgOrderByAggregateInput = {
    id?: SortOrder
    setsPorPartido?: SortOrder
    maxJugadores?: SortOrder
    puntosPorSet?: SortOrder
  }

  export type TournamentMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    setsPorPartido?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    maxJugadores?: SortOrder
    puntosPorSet?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    setsPorPartido?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    maxJugadores?: SortOrder
    puntosPorSet?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentSumOrderByAggregateInput = {
    id?: SortOrder
    setsPorPartido?: SortOrder
    maxJugadores?: SortOrder
    puntosPorSet?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TournamentRelationFilter = {
    is?: TournamentWhereInput
    isNot?: TournamentWhereInput
  }

  export type PlayerRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type PlayerNullableRelationFilter = {
    is?: PlayerWhereInput | null
    isNot?: PlayerWhereInput | null
  }

  export type SetListRelationFilter = {
    every?: SetWhereInput
    some?: SetWhereInput
    none?: SetWhereInput
  }

  export type SetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    ganadorId?: SortOrder
    setsJ1?: SortOrder
    setsJ2?: SortOrder
    ronda?: SortOrder
    fase?: SortOrder
    estado?: SortOrder
    fecha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchAvgOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    ganadorId?: SortOrder
    setsJ1?: SortOrder
    setsJ2?: SortOrder
    ronda?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    ganadorId?: SortOrder
    setsJ1?: SortOrder
    setsJ2?: SortOrder
    ronda?: SortOrder
    fase?: SortOrder
    estado?: SortOrder
    fecha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    ganadorId?: SortOrder
    setsJ1?: SortOrder
    setsJ2?: SortOrder
    ronda?: SortOrder
    fase?: SortOrder
    estado?: SortOrder
    fecha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchSumOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    ganadorId?: SortOrder
    setsJ1?: SortOrder
    setsJ2?: SortOrder
    ronda?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type MatchRelationFilter = {
    is?: MatchWhereInput
    isNot?: MatchWhereInput
  }

  export type SetPartidoIdNumeroSetCompoundUniqueInput = {
    partidoId: number
    numeroSet: number
  }

  export type SetCountOrderByAggregateInput = {
    id?: SortOrder
    partidoId?: SortOrder
    numeroSet?: SortOrder
    puntosJ1?: SortOrder
    puntosJ2?: SortOrder
    ganadorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SetAvgOrderByAggregateInput = {
    id?: SortOrder
    partidoId?: SortOrder
    numeroSet?: SortOrder
    puntosJ1?: SortOrder
    puntosJ2?: SortOrder
    ganadorId?: SortOrder
  }

  export type SetMaxOrderByAggregateInput = {
    id?: SortOrder
    partidoId?: SortOrder
    numeroSet?: SortOrder
    puntosJ1?: SortOrder
    puntosJ2?: SortOrder
    ganadorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SetMinOrderByAggregateInput = {
    id?: SortOrder
    partidoId?: SortOrder
    numeroSet?: SortOrder
    puntosJ1?: SortOrder
    puntosJ2?: SortOrder
    ganadorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SetSumOrderByAggregateInput = {
    id?: SortOrder
    partidoId?: SortOrder
    numeroSet?: SortOrder
    puntosJ1?: SortOrder
    puntosJ2?: SortOrder
    ganadorId?: SortOrder
  }

  export type PlayerListRelationFilter = {
    every?: PlayerWhereInput
    some?: PlayerWhereInput
    none?: PlayerWhereInput
  }

  export type PlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    nombre?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupAvgOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    nombre?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    nombre?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupSumOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
  }

  export type TournamentResultTorneoIdJugadorIdCompoundUniqueInput = {
    torneoId: number
    jugadorId: number
  }

  export type TournamentResultCountOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugadorId?: SortOrder
    posicionFinal?: SortOrder
    puntosGanados?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentResultAvgOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugadorId?: SortOrder
    posicionFinal?: SortOrder
    puntosGanados?: SortOrder
  }

  export type TournamentResultMaxOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugadorId?: SortOrder
    posicionFinal?: SortOrder
    puntosGanados?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentResultMinOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugadorId?: SortOrder
    posicionFinal?: SortOrder
    puntosGanados?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TournamentResultSumOrderByAggregateInput = {
    id?: SortOrder
    torneoId?: SortOrder
    jugadorId?: SortOrder
    posicionFinal?: SortOrder
    puntosGanados?: SortOrder
  }

  export type MatchCreateNestedManyWithoutJugador1Input = {
    create?: XOR<MatchCreateWithoutJugador1Input, MatchUncheckedCreateWithoutJugador1Input> | MatchCreateWithoutJugador1Input[] | MatchUncheckedCreateWithoutJugador1Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutJugador1Input | MatchCreateOrConnectWithoutJugador1Input[]
    createMany?: MatchCreateManyJugador1InputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutJugador2Input = {
    create?: XOR<MatchCreateWithoutJugador2Input, MatchUncheckedCreateWithoutJugador2Input> | MatchCreateWithoutJugador2Input[] | MatchUncheckedCreateWithoutJugador2Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutJugador2Input | MatchCreateOrConnectWithoutJugador2Input[]
    createMany?: MatchCreateManyJugador2InputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutGanadorInput = {
    create?: XOR<MatchCreateWithoutGanadorInput, MatchUncheckedCreateWithoutGanadorInput> | MatchCreateWithoutGanadorInput[] | MatchUncheckedCreateWithoutGanadorInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutGanadorInput | MatchCreateOrConnectWithoutGanadorInput[]
    createMany?: MatchCreateManyGanadorInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type TournamentResultCreateNestedManyWithoutJugadorInput = {
    create?: XOR<TournamentResultCreateWithoutJugadorInput, TournamentResultUncheckedCreateWithoutJugadorInput> | TournamentResultCreateWithoutJugadorInput[] | TournamentResultUncheckedCreateWithoutJugadorInput[]
    connectOrCreate?: TournamentResultCreateOrConnectWithoutJugadorInput | TournamentResultCreateOrConnectWithoutJugadorInput[]
    createMany?: TournamentResultCreateManyJugadorInputEnvelope
    connect?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
  }

  export type GroupCreateNestedManyWithoutJugadoresInput = {
    create?: XOR<GroupCreateWithoutJugadoresInput, GroupUncheckedCreateWithoutJugadoresInput> | GroupCreateWithoutJugadoresInput[] | GroupUncheckedCreateWithoutJugadoresInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutJugadoresInput | GroupCreateOrConnectWithoutJugadoresInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutJugador1Input = {
    create?: XOR<MatchCreateWithoutJugador1Input, MatchUncheckedCreateWithoutJugador1Input> | MatchCreateWithoutJugador1Input[] | MatchUncheckedCreateWithoutJugador1Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutJugador1Input | MatchCreateOrConnectWithoutJugador1Input[]
    createMany?: MatchCreateManyJugador1InputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutJugador2Input = {
    create?: XOR<MatchCreateWithoutJugador2Input, MatchUncheckedCreateWithoutJugador2Input> | MatchCreateWithoutJugador2Input[] | MatchUncheckedCreateWithoutJugador2Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutJugador2Input | MatchCreateOrConnectWithoutJugador2Input[]
    createMany?: MatchCreateManyJugador2InputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutGanadorInput = {
    create?: XOR<MatchCreateWithoutGanadorInput, MatchUncheckedCreateWithoutGanadorInput> | MatchCreateWithoutGanadorInput[] | MatchUncheckedCreateWithoutGanadorInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutGanadorInput | MatchCreateOrConnectWithoutGanadorInput[]
    createMany?: MatchCreateManyGanadorInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type TournamentResultUncheckedCreateNestedManyWithoutJugadorInput = {
    create?: XOR<TournamentResultCreateWithoutJugadorInput, TournamentResultUncheckedCreateWithoutJugadorInput> | TournamentResultCreateWithoutJugadorInput[] | TournamentResultUncheckedCreateWithoutJugadorInput[]
    connectOrCreate?: TournamentResultCreateOrConnectWithoutJugadorInput | TournamentResultCreateOrConnectWithoutJugadorInput[]
    createMany?: TournamentResultCreateManyJugadorInputEnvelope
    connect?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
  }

  export type GroupUncheckedCreateNestedManyWithoutJugadoresInput = {
    create?: XOR<GroupCreateWithoutJugadoresInput, GroupUncheckedCreateWithoutJugadoresInput> | GroupCreateWithoutJugadoresInput[] | GroupUncheckedCreateWithoutJugadoresInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutJugadoresInput | GroupCreateOrConnectWithoutJugadoresInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MatchUpdateManyWithoutJugador1NestedInput = {
    create?: XOR<MatchCreateWithoutJugador1Input, MatchUncheckedCreateWithoutJugador1Input> | MatchCreateWithoutJugador1Input[] | MatchUncheckedCreateWithoutJugador1Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutJugador1Input | MatchCreateOrConnectWithoutJugador1Input[]
    upsert?: MatchUpsertWithWhereUniqueWithoutJugador1Input | MatchUpsertWithWhereUniqueWithoutJugador1Input[]
    createMany?: MatchCreateManyJugador1InputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutJugador1Input | MatchUpdateWithWhereUniqueWithoutJugador1Input[]
    updateMany?: MatchUpdateManyWithWhereWithoutJugador1Input | MatchUpdateManyWithWhereWithoutJugador1Input[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutJugador2NestedInput = {
    create?: XOR<MatchCreateWithoutJugador2Input, MatchUncheckedCreateWithoutJugador2Input> | MatchCreateWithoutJugador2Input[] | MatchUncheckedCreateWithoutJugador2Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutJugador2Input | MatchCreateOrConnectWithoutJugador2Input[]
    upsert?: MatchUpsertWithWhereUniqueWithoutJugador2Input | MatchUpsertWithWhereUniqueWithoutJugador2Input[]
    createMany?: MatchCreateManyJugador2InputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutJugador2Input | MatchUpdateWithWhereUniqueWithoutJugador2Input[]
    updateMany?: MatchUpdateManyWithWhereWithoutJugador2Input | MatchUpdateManyWithWhereWithoutJugador2Input[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutGanadorNestedInput = {
    create?: XOR<MatchCreateWithoutGanadorInput, MatchUncheckedCreateWithoutGanadorInput> | MatchCreateWithoutGanadorInput[] | MatchUncheckedCreateWithoutGanadorInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutGanadorInput | MatchCreateOrConnectWithoutGanadorInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutGanadorInput | MatchUpsertWithWhereUniqueWithoutGanadorInput[]
    createMany?: MatchCreateManyGanadorInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutGanadorInput | MatchUpdateWithWhereUniqueWithoutGanadorInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutGanadorInput | MatchUpdateManyWithWhereWithoutGanadorInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type TournamentResultUpdateManyWithoutJugadorNestedInput = {
    create?: XOR<TournamentResultCreateWithoutJugadorInput, TournamentResultUncheckedCreateWithoutJugadorInput> | TournamentResultCreateWithoutJugadorInput[] | TournamentResultUncheckedCreateWithoutJugadorInput[]
    connectOrCreate?: TournamentResultCreateOrConnectWithoutJugadorInput | TournamentResultCreateOrConnectWithoutJugadorInput[]
    upsert?: TournamentResultUpsertWithWhereUniqueWithoutJugadorInput | TournamentResultUpsertWithWhereUniqueWithoutJugadorInput[]
    createMany?: TournamentResultCreateManyJugadorInputEnvelope
    set?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    disconnect?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    delete?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    connect?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    update?: TournamentResultUpdateWithWhereUniqueWithoutJugadorInput | TournamentResultUpdateWithWhereUniqueWithoutJugadorInput[]
    updateMany?: TournamentResultUpdateManyWithWhereWithoutJugadorInput | TournamentResultUpdateManyWithWhereWithoutJugadorInput[]
    deleteMany?: TournamentResultScalarWhereInput | TournamentResultScalarWhereInput[]
  }

  export type GroupUpdateManyWithoutJugadoresNestedInput = {
    create?: XOR<GroupCreateWithoutJugadoresInput, GroupUncheckedCreateWithoutJugadoresInput> | GroupCreateWithoutJugadoresInput[] | GroupUncheckedCreateWithoutJugadoresInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutJugadoresInput | GroupCreateOrConnectWithoutJugadoresInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutJugadoresInput | GroupUpsertWithWhereUniqueWithoutJugadoresInput[]
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutJugadoresInput | GroupUpdateWithWhereUniqueWithoutJugadoresInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutJugadoresInput | GroupUpdateManyWithWhereWithoutJugadoresInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutJugador1NestedInput = {
    create?: XOR<MatchCreateWithoutJugador1Input, MatchUncheckedCreateWithoutJugador1Input> | MatchCreateWithoutJugador1Input[] | MatchUncheckedCreateWithoutJugador1Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutJugador1Input | MatchCreateOrConnectWithoutJugador1Input[]
    upsert?: MatchUpsertWithWhereUniqueWithoutJugador1Input | MatchUpsertWithWhereUniqueWithoutJugador1Input[]
    createMany?: MatchCreateManyJugador1InputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutJugador1Input | MatchUpdateWithWhereUniqueWithoutJugador1Input[]
    updateMany?: MatchUpdateManyWithWhereWithoutJugador1Input | MatchUpdateManyWithWhereWithoutJugador1Input[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutJugador2NestedInput = {
    create?: XOR<MatchCreateWithoutJugador2Input, MatchUncheckedCreateWithoutJugador2Input> | MatchCreateWithoutJugador2Input[] | MatchUncheckedCreateWithoutJugador2Input[]
    connectOrCreate?: MatchCreateOrConnectWithoutJugador2Input | MatchCreateOrConnectWithoutJugador2Input[]
    upsert?: MatchUpsertWithWhereUniqueWithoutJugador2Input | MatchUpsertWithWhereUniqueWithoutJugador2Input[]
    createMany?: MatchCreateManyJugador2InputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutJugador2Input | MatchUpdateWithWhereUniqueWithoutJugador2Input[]
    updateMany?: MatchUpdateManyWithWhereWithoutJugador2Input | MatchUpdateManyWithWhereWithoutJugador2Input[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutGanadorNestedInput = {
    create?: XOR<MatchCreateWithoutGanadorInput, MatchUncheckedCreateWithoutGanadorInput> | MatchCreateWithoutGanadorInput[] | MatchUncheckedCreateWithoutGanadorInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutGanadorInput | MatchCreateOrConnectWithoutGanadorInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutGanadorInput | MatchUpsertWithWhereUniqueWithoutGanadorInput[]
    createMany?: MatchCreateManyGanadorInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutGanadorInput | MatchUpdateWithWhereUniqueWithoutGanadorInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutGanadorInput | MatchUpdateManyWithWhereWithoutGanadorInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type TournamentResultUncheckedUpdateManyWithoutJugadorNestedInput = {
    create?: XOR<TournamentResultCreateWithoutJugadorInput, TournamentResultUncheckedCreateWithoutJugadorInput> | TournamentResultCreateWithoutJugadorInput[] | TournamentResultUncheckedCreateWithoutJugadorInput[]
    connectOrCreate?: TournamentResultCreateOrConnectWithoutJugadorInput | TournamentResultCreateOrConnectWithoutJugadorInput[]
    upsert?: TournamentResultUpsertWithWhereUniqueWithoutJugadorInput | TournamentResultUpsertWithWhereUniqueWithoutJugadorInput[]
    createMany?: TournamentResultCreateManyJugadorInputEnvelope
    set?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    disconnect?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    delete?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    connect?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    update?: TournamentResultUpdateWithWhereUniqueWithoutJugadorInput | TournamentResultUpdateWithWhereUniqueWithoutJugadorInput[]
    updateMany?: TournamentResultUpdateManyWithWhereWithoutJugadorInput | TournamentResultUpdateManyWithWhereWithoutJugadorInput[]
    deleteMany?: TournamentResultScalarWhereInput | TournamentResultScalarWhereInput[]
  }

  export type GroupUncheckedUpdateManyWithoutJugadoresNestedInput = {
    create?: XOR<GroupCreateWithoutJugadoresInput, GroupUncheckedCreateWithoutJugadoresInput> | GroupCreateWithoutJugadoresInput[] | GroupUncheckedCreateWithoutJugadoresInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutJugadoresInput | GroupCreateOrConnectWithoutJugadoresInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutJugadoresInput | GroupUpsertWithWhereUniqueWithoutJugadoresInput[]
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutJugadoresInput | GroupUpdateWithWhereUniqueWithoutJugadoresInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutJugadoresInput | GroupUpdateManyWithWhereWithoutJugadoresInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type MatchCreateNestedManyWithoutTorneoInput = {
    create?: XOR<MatchCreateWithoutTorneoInput, MatchUncheckedCreateWithoutTorneoInput> | MatchCreateWithoutTorneoInput[] | MatchUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutTorneoInput | MatchCreateOrConnectWithoutTorneoInput[]
    createMany?: MatchCreateManyTorneoInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type GroupCreateNestedManyWithoutTorneoInput = {
    create?: XOR<GroupCreateWithoutTorneoInput, GroupUncheckedCreateWithoutTorneoInput> | GroupCreateWithoutTorneoInput[] | GroupUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutTorneoInput | GroupCreateOrConnectWithoutTorneoInput[]
    createMany?: GroupCreateManyTorneoInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type TournamentResultCreateNestedManyWithoutTorneoInput = {
    create?: XOR<TournamentResultCreateWithoutTorneoInput, TournamentResultUncheckedCreateWithoutTorneoInput> | TournamentResultCreateWithoutTorneoInput[] | TournamentResultUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: TournamentResultCreateOrConnectWithoutTorneoInput | TournamentResultCreateOrConnectWithoutTorneoInput[]
    createMany?: TournamentResultCreateManyTorneoInputEnvelope
    connect?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutTorneoInput = {
    create?: XOR<MatchCreateWithoutTorneoInput, MatchUncheckedCreateWithoutTorneoInput> | MatchCreateWithoutTorneoInput[] | MatchUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutTorneoInput | MatchCreateOrConnectWithoutTorneoInput[]
    createMany?: MatchCreateManyTorneoInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type GroupUncheckedCreateNestedManyWithoutTorneoInput = {
    create?: XOR<GroupCreateWithoutTorneoInput, GroupUncheckedCreateWithoutTorneoInput> | GroupCreateWithoutTorneoInput[] | GroupUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutTorneoInput | GroupCreateOrConnectWithoutTorneoInput[]
    createMany?: GroupCreateManyTorneoInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type TournamentResultUncheckedCreateNestedManyWithoutTorneoInput = {
    create?: XOR<TournamentResultCreateWithoutTorneoInput, TournamentResultUncheckedCreateWithoutTorneoInput> | TournamentResultCreateWithoutTorneoInput[] | TournamentResultUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: TournamentResultCreateOrConnectWithoutTorneoInput | TournamentResultCreateOrConnectWithoutTorneoInput[]
    createMany?: TournamentResultCreateManyTorneoInputEnvelope
    connect?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
  }

  export type MatchUpdateManyWithoutTorneoNestedInput = {
    create?: XOR<MatchCreateWithoutTorneoInput, MatchUncheckedCreateWithoutTorneoInput> | MatchCreateWithoutTorneoInput[] | MatchUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutTorneoInput | MatchCreateOrConnectWithoutTorneoInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutTorneoInput | MatchUpsertWithWhereUniqueWithoutTorneoInput[]
    createMany?: MatchCreateManyTorneoInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutTorneoInput | MatchUpdateWithWhereUniqueWithoutTorneoInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutTorneoInput | MatchUpdateManyWithWhereWithoutTorneoInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type GroupUpdateManyWithoutTorneoNestedInput = {
    create?: XOR<GroupCreateWithoutTorneoInput, GroupUncheckedCreateWithoutTorneoInput> | GroupCreateWithoutTorneoInput[] | GroupUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutTorneoInput | GroupCreateOrConnectWithoutTorneoInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutTorneoInput | GroupUpsertWithWhereUniqueWithoutTorneoInput[]
    createMany?: GroupCreateManyTorneoInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutTorneoInput | GroupUpdateWithWhereUniqueWithoutTorneoInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutTorneoInput | GroupUpdateManyWithWhereWithoutTorneoInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type TournamentResultUpdateManyWithoutTorneoNestedInput = {
    create?: XOR<TournamentResultCreateWithoutTorneoInput, TournamentResultUncheckedCreateWithoutTorneoInput> | TournamentResultCreateWithoutTorneoInput[] | TournamentResultUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: TournamentResultCreateOrConnectWithoutTorneoInput | TournamentResultCreateOrConnectWithoutTorneoInput[]
    upsert?: TournamentResultUpsertWithWhereUniqueWithoutTorneoInput | TournamentResultUpsertWithWhereUniqueWithoutTorneoInput[]
    createMany?: TournamentResultCreateManyTorneoInputEnvelope
    set?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    disconnect?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    delete?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    connect?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    update?: TournamentResultUpdateWithWhereUniqueWithoutTorneoInput | TournamentResultUpdateWithWhereUniqueWithoutTorneoInput[]
    updateMany?: TournamentResultUpdateManyWithWhereWithoutTorneoInput | TournamentResultUpdateManyWithWhereWithoutTorneoInput[]
    deleteMany?: TournamentResultScalarWhereInput | TournamentResultScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutTorneoNestedInput = {
    create?: XOR<MatchCreateWithoutTorneoInput, MatchUncheckedCreateWithoutTorneoInput> | MatchCreateWithoutTorneoInput[] | MatchUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutTorneoInput | MatchCreateOrConnectWithoutTorneoInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutTorneoInput | MatchUpsertWithWhereUniqueWithoutTorneoInput[]
    createMany?: MatchCreateManyTorneoInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutTorneoInput | MatchUpdateWithWhereUniqueWithoutTorneoInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutTorneoInput | MatchUpdateManyWithWhereWithoutTorneoInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type GroupUncheckedUpdateManyWithoutTorneoNestedInput = {
    create?: XOR<GroupCreateWithoutTorneoInput, GroupUncheckedCreateWithoutTorneoInput> | GroupCreateWithoutTorneoInput[] | GroupUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutTorneoInput | GroupCreateOrConnectWithoutTorneoInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutTorneoInput | GroupUpsertWithWhereUniqueWithoutTorneoInput[]
    createMany?: GroupCreateManyTorneoInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutTorneoInput | GroupUpdateWithWhereUniqueWithoutTorneoInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutTorneoInput | GroupUpdateManyWithWhereWithoutTorneoInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type TournamentResultUncheckedUpdateManyWithoutTorneoNestedInput = {
    create?: XOR<TournamentResultCreateWithoutTorneoInput, TournamentResultUncheckedCreateWithoutTorneoInput> | TournamentResultCreateWithoutTorneoInput[] | TournamentResultUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: TournamentResultCreateOrConnectWithoutTorneoInput | TournamentResultCreateOrConnectWithoutTorneoInput[]
    upsert?: TournamentResultUpsertWithWhereUniqueWithoutTorneoInput | TournamentResultUpsertWithWhereUniqueWithoutTorneoInput[]
    createMany?: TournamentResultCreateManyTorneoInputEnvelope
    set?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    disconnect?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    delete?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    connect?: TournamentResultWhereUniqueInput | TournamentResultWhereUniqueInput[]
    update?: TournamentResultUpdateWithWhereUniqueWithoutTorneoInput | TournamentResultUpdateWithWhereUniqueWithoutTorneoInput[]
    updateMany?: TournamentResultUpdateManyWithWhereWithoutTorneoInput | TournamentResultUpdateManyWithWhereWithoutTorneoInput[]
    deleteMany?: TournamentResultScalarWhereInput | TournamentResultScalarWhereInput[]
  }

  export type TournamentCreateNestedOneWithoutMatchesInput = {
    create?: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutMatchesInput
    connect?: TournamentWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutMatches1Input = {
    create?: XOR<PlayerCreateWithoutMatches1Input, PlayerUncheckedCreateWithoutMatches1Input>
    connectOrCreate?: PlayerCreateOrConnectWithoutMatches1Input
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutMatches2Input = {
    create?: XOR<PlayerCreateWithoutMatches2Input, PlayerUncheckedCreateWithoutMatches2Input>
    connectOrCreate?: PlayerCreateOrConnectWithoutMatches2Input
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutMatchesGanadosInput = {
    create?: XOR<PlayerCreateWithoutMatchesGanadosInput, PlayerUncheckedCreateWithoutMatchesGanadosInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutMatchesGanadosInput
    connect?: PlayerWhereUniqueInput
  }

  export type SetCreateNestedManyWithoutPartidoInput = {
    create?: XOR<SetCreateWithoutPartidoInput, SetUncheckedCreateWithoutPartidoInput> | SetCreateWithoutPartidoInput[] | SetUncheckedCreateWithoutPartidoInput[]
    connectOrCreate?: SetCreateOrConnectWithoutPartidoInput | SetCreateOrConnectWithoutPartidoInput[]
    createMany?: SetCreateManyPartidoInputEnvelope
    connect?: SetWhereUniqueInput | SetWhereUniqueInput[]
  }

  export type SetUncheckedCreateNestedManyWithoutPartidoInput = {
    create?: XOR<SetCreateWithoutPartidoInput, SetUncheckedCreateWithoutPartidoInput> | SetCreateWithoutPartidoInput[] | SetUncheckedCreateWithoutPartidoInput[]
    connectOrCreate?: SetCreateOrConnectWithoutPartidoInput | SetCreateOrConnectWithoutPartidoInput[]
    createMany?: SetCreateManyPartidoInputEnvelope
    connect?: SetWhereUniqueInput | SetWhereUniqueInput[]
  }

  export type TournamentUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutMatchesInput
    upsert?: TournamentUpsertWithoutMatchesInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutMatchesInput, TournamentUpdateWithoutMatchesInput>, TournamentUncheckedUpdateWithoutMatchesInput>
  }

  export type PlayerUpdateOneRequiredWithoutMatches1NestedInput = {
    create?: XOR<PlayerCreateWithoutMatches1Input, PlayerUncheckedCreateWithoutMatches1Input>
    connectOrCreate?: PlayerCreateOrConnectWithoutMatches1Input
    upsert?: PlayerUpsertWithoutMatches1Input
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutMatches1Input, PlayerUpdateWithoutMatches1Input>, PlayerUncheckedUpdateWithoutMatches1Input>
  }

  export type PlayerUpdateOneRequiredWithoutMatches2NestedInput = {
    create?: XOR<PlayerCreateWithoutMatches2Input, PlayerUncheckedCreateWithoutMatches2Input>
    connectOrCreate?: PlayerCreateOrConnectWithoutMatches2Input
    upsert?: PlayerUpsertWithoutMatches2Input
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutMatches2Input, PlayerUpdateWithoutMatches2Input>, PlayerUncheckedUpdateWithoutMatches2Input>
  }

  export type PlayerUpdateOneWithoutMatchesGanadosNestedInput = {
    create?: XOR<PlayerCreateWithoutMatchesGanadosInput, PlayerUncheckedCreateWithoutMatchesGanadosInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutMatchesGanadosInput
    upsert?: PlayerUpsertWithoutMatchesGanadosInput
    disconnect?: PlayerWhereInput | boolean
    delete?: PlayerWhereInput | boolean
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutMatchesGanadosInput, PlayerUpdateWithoutMatchesGanadosInput>, PlayerUncheckedUpdateWithoutMatchesGanadosInput>
  }

  export type SetUpdateManyWithoutPartidoNestedInput = {
    create?: XOR<SetCreateWithoutPartidoInput, SetUncheckedCreateWithoutPartidoInput> | SetCreateWithoutPartidoInput[] | SetUncheckedCreateWithoutPartidoInput[]
    connectOrCreate?: SetCreateOrConnectWithoutPartidoInput | SetCreateOrConnectWithoutPartidoInput[]
    upsert?: SetUpsertWithWhereUniqueWithoutPartidoInput | SetUpsertWithWhereUniqueWithoutPartidoInput[]
    createMany?: SetCreateManyPartidoInputEnvelope
    set?: SetWhereUniqueInput | SetWhereUniqueInput[]
    disconnect?: SetWhereUniqueInput | SetWhereUniqueInput[]
    delete?: SetWhereUniqueInput | SetWhereUniqueInput[]
    connect?: SetWhereUniqueInput | SetWhereUniqueInput[]
    update?: SetUpdateWithWhereUniqueWithoutPartidoInput | SetUpdateWithWhereUniqueWithoutPartidoInput[]
    updateMany?: SetUpdateManyWithWhereWithoutPartidoInput | SetUpdateManyWithWhereWithoutPartidoInput[]
    deleteMany?: SetScalarWhereInput | SetScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SetUncheckedUpdateManyWithoutPartidoNestedInput = {
    create?: XOR<SetCreateWithoutPartidoInput, SetUncheckedCreateWithoutPartidoInput> | SetCreateWithoutPartidoInput[] | SetUncheckedCreateWithoutPartidoInput[]
    connectOrCreate?: SetCreateOrConnectWithoutPartidoInput | SetCreateOrConnectWithoutPartidoInput[]
    upsert?: SetUpsertWithWhereUniqueWithoutPartidoInput | SetUpsertWithWhereUniqueWithoutPartidoInput[]
    createMany?: SetCreateManyPartidoInputEnvelope
    set?: SetWhereUniqueInput | SetWhereUniqueInput[]
    disconnect?: SetWhereUniqueInput | SetWhereUniqueInput[]
    delete?: SetWhereUniqueInput | SetWhereUniqueInput[]
    connect?: SetWhereUniqueInput | SetWhereUniqueInput[]
    update?: SetUpdateWithWhereUniqueWithoutPartidoInput | SetUpdateWithWhereUniqueWithoutPartidoInput[]
    updateMany?: SetUpdateManyWithWhereWithoutPartidoInput | SetUpdateManyWithWhereWithoutPartidoInput[]
    deleteMany?: SetScalarWhereInput | SetScalarWhereInput[]
  }

  export type MatchCreateNestedOneWithoutSetsInput = {
    create?: XOR<MatchCreateWithoutSetsInput, MatchUncheckedCreateWithoutSetsInput>
    connectOrCreate?: MatchCreateOrConnectWithoutSetsInput
    connect?: MatchWhereUniqueInput
  }

  export type MatchUpdateOneRequiredWithoutSetsNestedInput = {
    create?: XOR<MatchCreateWithoutSetsInput, MatchUncheckedCreateWithoutSetsInput>
    connectOrCreate?: MatchCreateOrConnectWithoutSetsInput
    upsert?: MatchUpsertWithoutSetsInput
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutSetsInput, MatchUpdateWithoutSetsInput>, MatchUncheckedUpdateWithoutSetsInput>
  }

  export type TournamentCreateNestedOneWithoutGroupsInput = {
    create?: XOR<TournamentCreateWithoutGroupsInput, TournamentUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutGroupsInput
    connect?: TournamentWhereUniqueInput
  }

  export type PlayerCreateNestedManyWithoutGroupsInput = {
    create?: XOR<PlayerCreateWithoutGroupsInput, PlayerUncheckedCreateWithoutGroupsInput> | PlayerCreateWithoutGroupsInput[] | PlayerUncheckedCreateWithoutGroupsInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutGroupsInput | PlayerCreateOrConnectWithoutGroupsInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<PlayerCreateWithoutGroupsInput, PlayerUncheckedCreateWithoutGroupsInput> | PlayerCreateWithoutGroupsInput[] | PlayerUncheckedCreateWithoutGroupsInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutGroupsInput | PlayerCreateOrConnectWithoutGroupsInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type TournamentUpdateOneRequiredWithoutGroupsNestedInput = {
    create?: XOR<TournamentCreateWithoutGroupsInput, TournamentUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutGroupsInput
    upsert?: TournamentUpsertWithoutGroupsInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutGroupsInput, TournamentUpdateWithoutGroupsInput>, TournamentUncheckedUpdateWithoutGroupsInput>
  }

  export type PlayerUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<PlayerCreateWithoutGroupsInput, PlayerUncheckedCreateWithoutGroupsInput> | PlayerCreateWithoutGroupsInput[] | PlayerUncheckedCreateWithoutGroupsInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutGroupsInput | PlayerCreateOrConnectWithoutGroupsInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutGroupsInput | PlayerUpsertWithWhereUniqueWithoutGroupsInput[]
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutGroupsInput | PlayerUpdateWithWhereUniqueWithoutGroupsInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutGroupsInput | PlayerUpdateManyWithWhereWithoutGroupsInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type PlayerUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<PlayerCreateWithoutGroupsInput, PlayerUncheckedCreateWithoutGroupsInput> | PlayerCreateWithoutGroupsInput[] | PlayerUncheckedCreateWithoutGroupsInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutGroupsInput | PlayerCreateOrConnectWithoutGroupsInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutGroupsInput | PlayerUpsertWithWhereUniqueWithoutGroupsInput[]
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutGroupsInput | PlayerUpdateWithWhereUniqueWithoutGroupsInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutGroupsInput | PlayerUpdateManyWithWhereWithoutGroupsInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type TournamentCreateNestedOneWithoutTournamentResultsInput = {
    create?: XOR<TournamentCreateWithoutTournamentResultsInput, TournamentUncheckedCreateWithoutTournamentResultsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutTournamentResultsInput
    connect?: TournamentWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutTournamentResultsInput = {
    create?: XOR<PlayerCreateWithoutTournamentResultsInput, PlayerUncheckedCreateWithoutTournamentResultsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutTournamentResultsInput
    connect?: PlayerWhereUniqueInput
  }

  export type TournamentUpdateOneRequiredWithoutTournamentResultsNestedInput = {
    create?: XOR<TournamentCreateWithoutTournamentResultsInput, TournamentUncheckedCreateWithoutTournamentResultsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutTournamentResultsInput
    upsert?: TournamentUpsertWithoutTournamentResultsInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutTournamentResultsInput, TournamentUpdateWithoutTournamentResultsInput>, TournamentUncheckedUpdateWithoutTournamentResultsInput>
  }

  export type PlayerUpdateOneRequiredWithoutTournamentResultsNestedInput = {
    create?: XOR<PlayerCreateWithoutTournamentResultsInput, PlayerUncheckedCreateWithoutTournamentResultsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutTournamentResultsInput
    upsert?: PlayerUpsertWithoutTournamentResultsInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutTournamentResultsInput, PlayerUpdateWithoutTournamentResultsInput>, PlayerUncheckedUpdateWithoutTournamentResultsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type MatchCreateWithoutJugador1Input = {
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    torneo: TournamentCreateNestedOneWithoutMatchesInput
    jugador2: PlayerCreateNestedOneWithoutMatches2Input
    ganador?: PlayerCreateNestedOneWithoutMatchesGanadosInput
    sets?: SetCreateNestedManyWithoutPartidoInput
  }

  export type MatchUncheckedCreateWithoutJugador1Input = {
    id?: number
    torneoId: number
    jugador2Id: number
    ganadorId?: number | null
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sets?: SetUncheckedCreateNestedManyWithoutPartidoInput
  }

  export type MatchCreateOrConnectWithoutJugador1Input = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutJugador1Input, MatchUncheckedCreateWithoutJugador1Input>
  }

  export type MatchCreateManyJugador1InputEnvelope = {
    data: MatchCreateManyJugador1Input | MatchCreateManyJugador1Input[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutJugador2Input = {
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    torneo: TournamentCreateNestedOneWithoutMatchesInput
    jugador1: PlayerCreateNestedOneWithoutMatches1Input
    ganador?: PlayerCreateNestedOneWithoutMatchesGanadosInput
    sets?: SetCreateNestedManyWithoutPartidoInput
  }

  export type MatchUncheckedCreateWithoutJugador2Input = {
    id?: number
    torneoId: number
    jugador1Id: number
    ganadorId?: number | null
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sets?: SetUncheckedCreateNestedManyWithoutPartidoInput
  }

  export type MatchCreateOrConnectWithoutJugador2Input = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutJugador2Input, MatchUncheckedCreateWithoutJugador2Input>
  }

  export type MatchCreateManyJugador2InputEnvelope = {
    data: MatchCreateManyJugador2Input | MatchCreateManyJugador2Input[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutGanadorInput = {
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    torneo: TournamentCreateNestedOneWithoutMatchesInput
    jugador1: PlayerCreateNestedOneWithoutMatches1Input
    jugador2: PlayerCreateNestedOneWithoutMatches2Input
    sets?: SetCreateNestedManyWithoutPartidoInput
  }

  export type MatchUncheckedCreateWithoutGanadorInput = {
    id?: number
    torneoId: number
    jugador1Id: number
    jugador2Id: number
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sets?: SetUncheckedCreateNestedManyWithoutPartidoInput
  }

  export type MatchCreateOrConnectWithoutGanadorInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutGanadorInput, MatchUncheckedCreateWithoutGanadorInput>
  }

  export type MatchCreateManyGanadorInputEnvelope = {
    data: MatchCreateManyGanadorInput | MatchCreateManyGanadorInput[]
    skipDuplicates?: boolean
  }

  export type TournamentResultCreateWithoutJugadorInput = {
    posicionFinal: number
    puntosGanados: number
    createdAt?: Date | string
    updatedAt?: Date | string
    torneo: TournamentCreateNestedOneWithoutTournamentResultsInput
  }

  export type TournamentResultUncheckedCreateWithoutJugadorInput = {
    id?: number
    torneoId: number
    posicionFinal: number
    puntosGanados: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentResultCreateOrConnectWithoutJugadorInput = {
    where: TournamentResultWhereUniqueInput
    create: XOR<TournamentResultCreateWithoutJugadorInput, TournamentResultUncheckedCreateWithoutJugadorInput>
  }

  export type TournamentResultCreateManyJugadorInputEnvelope = {
    data: TournamentResultCreateManyJugadorInput | TournamentResultCreateManyJugadorInput[]
    skipDuplicates?: boolean
  }

  export type GroupCreateWithoutJugadoresInput = {
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
    torneo: TournamentCreateNestedOneWithoutGroupsInput
  }

  export type GroupUncheckedCreateWithoutJugadoresInput = {
    id?: number
    torneoId: number
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupCreateOrConnectWithoutJugadoresInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutJugadoresInput, GroupUncheckedCreateWithoutJugadoresInput>
  }

  export type MatchUpsertWithWhereUniqueWithoutJugador1Input = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutJugador1Input, MatchUncheckedUpdateWithoutJugador1Input>
    create: XOR<MatchCreateWithoutJugador1Input, MatchUncheckedCreateWithoutJugador1Input>
  }

  export type MatchUpdateWithWhereUniqueWithoutJugador1Input = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutJugador1Input, MatchUncheckedUpdateWithoutJugador1Input>
  }

  export type MatchUpdateManyWithWhereWithoutJugador1Input = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutJugador1Input>
  }

  export type MatchScalarWhereInput = {
    AND?: MatchScalarWhereInput | MatchScalarWhereInput[]
    OR?: MatchScalarWhereInput[]
    NOT?: MatchScalarWhereInput | MatchScalarWhereInput[]
    id?: IntFilter<"Match"> | number
    torneoId?: IntFilter<"Match"> | number
    jugador1Id?: IntFilter<"Match"> | number
    jugador2Id?: IntFilter<"Match"> | number
    ganadorId?: IntNullableFilter<"Match"> | number | null
    setsJ1?: IntFilter<"Match"> | number
    setsJ2?: IntFilter<"Match"> | number
    ronda?: IntFilter<"Match"> | number
    fase?: StringFilter<"Match"> | string
    estado?: StringFilter<"Match"> | string
    fecha?: DateTimeNullableFilter<"Match"> | Date | string | null
    createdAt?: DateTimeFilter<"Match"> | Date | string
    updatedAt?: DateTimeFilter<"Match"> | Date | string
  }

  export type MatchUpsertWithWhereUniqueWithoutJugador2Input = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutJugador2Input, MatchUncheckedUpdateWithoutJugador2Input>
    create: XOR<MatchCreateWithoutJugador2Input, MatchUncheckedCreateWithoutJugador2Input>
  }

  export type MatchUpdateWithWhereUniqueWithoutJugador2Input = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutJugador2Input, MatchUncheckedUpdateWithoutJugador2Input>
  }

  export type MatchUpdateManyWithWhereWithoutJugador2Input = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutJugador2Input>
  }

  export type MatchUpsertWithWhereUniqueWithoutGanadorInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutGanadorInput, MatchUncheckedUpdateWithoutGanadorInput>
    create: XOR<MatchCreateWithoutGanadorInput, MatchUncheckedCreateWithoutGanadorInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutGanadorInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutGanadorInput, MatchUncheckedUpdateWithoutGanadorInput>
  }

  export type MatchUpdateManyWithWhereWithoutGanadorInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutGanadorInput>
  }

  export type TournamentResultUpsertWithWhereUniqueWithoutJugadorInput = {
    where: TournamentResultWhereUniqueInput
    update: XOR<TournamentResultUpdateWithoutJugadorInput, TournamentResultUncheckedUpdateWithoutJugadorInput>
    create: XOR<TournamentResultCreateWithoutJugadorInput, TournamentResultUncheckedCreateWithoutJugadorInput>
  }

  export type TournamentResultUpdateWithWhereUniqueWithoutJugadorInput = {
    where: TournamentResultWhereUniqueInput
    data: XOR<TournamentResultUpdateWithoutJugadorInput, TournamentResultUncheckedUpdateWithoutJugadorInput>
  }

  export type TournamentResultUpdateManyWithWhereWithoutJugadorInput = {
    where: TournamentResultScalarWhereInput
    data: XOR<TournamentResultUpdateManyMutationInput, TournamentResultUncheckedUpdateManyWithoutJugadorInput>
  }

  export type TournamentResultScalarWhereInput = {
    AND?: TournamentResultScalarWhereInput | TournamentResultScalarWhereInput[]
    OR?: TournamentResultScalarWhereInput[]
    NOT?: TournamentResultScalarWhereInput | TournamentResultScalarWhereInput[]
    id?: IntFilter<"TournamentResult"> | number
    torneoId?: IntFilter<"TournamentResult"> | number
    jugadorId?: IntFilter<"TournamentResult"> | number
    posicionFinal?: IntFilter<"TournamentResult"> | number
    puntosGanados?: IntFilter<"TournamentResult"> | number
    createdAt?: DateTimeFilter<"TournamentResult"> | Date | string
    updatedAt?: DateTimeFilter<"TournamentResult"> | Date | string
  }

  export type GroupUpsertWithWhereUniqueWithoutJugadoresInput = {
    where: GroupWhereUniqueInput
    update: XOR<GroupUpdateWithoutJugadoresInput, GroupUncheckedUpdateWithoutJugadoresInput>
    create: XOR<GroupCreateWithoutJugadoresInput, GroupUncheckedCreateWithoutJugadoresInput>
  }

  export type GroupUpdateWithWhereUniqueWithoutJugadoresInput = {
    where: GroupWhereUniqueInput
    data: XOR<GroupUpdateWithoutJugadoresInput, GroupUncheckedUpdateWithoutJugadoresInput>
  }

  export type GroupUpdateManyWithWhereWithoutJugadoresInput = {
    where: GroupScalarWhereInput
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyWithoutJugadoresInput>
  }

  export type GroupScalarWhereInput = {
    AND?: GroupScalarWhereInput | GroupScalarWhereInput[]
    OR?: GroupScalarWhereInput[]
    NOT?: GroupScalarWhereInput | GroupScalarWhereInput[]
    id?: IntFilter<"Group"> | number
    torneoId?: IntFilter<"Group"> | number
    nombre?: StringFilter<"Group"> | string
    createdAt?: DateTimeFilter<"Group"> | Date | string
    updatedAt?: DateTimeFilter<"Group"> | Date | string
  }

  export type MatchCreateWithoutTorneoInput = {
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    jugador1: PlayerCreateNestedOneWithoutMatches1Input
    jugador2: PlayerCreateNestedOneWithoutMatches2Input
    ganador?: PlayerCreateNestedOneWithoutMatchesGanadosInput
    sets?: SetCreateNestedManyWithoutPartidoInput
  }

  export type MatchUncheckedCreateWithoutTorneoInput = {
    id?: number
    jugador1Id: number
    jugador2Id: number
    ganadorId?: number | null
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sets?: SetUncheckedCreateNestedManyWithoutPartidoInput
  }

  export type MatchCreateOrConnectWithoutTorneoInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutTorneoInput, MatchUncheckedCreateWithoutTorneoInput>
  }

  export type MatchCreateManyTorneoInputEnvelope = {
    data: MatchCreateManyTorneoInput | MatchCreateManyTorneoInput[]
    skipDuplicates?: boolean
  }

  export type GroupCreateWithoutTorneoInput = {
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jugadores?: PlayerCreateNestedManyWithoutGroupsInput
  }

  export type GroupUncheckedCreateWithoutTorneoInput = {
    id?: number
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jugadores?: PlayerUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupCreateOrConnectWithoutTorneoInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutTorneoInput, GroupUncheckedCreateWithoutTorneoInput>
  }

  export type GroupCreateManyTorneoInputEnvelope = {
    data: GroupCreateManyTorneoInput | GroupCreateManyTorneoInput[]
    skipDuplicates?: boolean
  }

  export type TournamentResultCreateWithoutTorneoInput = {
    posicionFinal: number
    puntosGanados: number
    createdAt?: Date | string
    updatedAt?: Date | string
    jugador: PlayerCreateNestedOneWithoutTournamentResultsInput
  }

  export type TournamentResultUncheckedCreateWithoutTorneoInput = {
    id?: number
    jugadorId: number
    posicionFinal: number
    puntosGanados: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentResultCreateOrConnectWithoutTorneoInput = {
    where: TournamentResultWhereUniqueInput
    create: XOR<TournamentResultCreateWithoutTorneoInput, TournamentResultUncheckedCreateWithoutTorneoInput>
  }

  export type TournamentResultCreateManyTorneoInputEnvelope = {
    data: TournamentResultCreateManyTorneoInput | TournamentResultCreateManyTorneoInput[]
    skipDuplicates?: boolean
  }

  export type MatchUpsertWithWhereUniqueWithoutTorneoInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutTorneoInput, MatchUncheckedUpdateWithoutTorneoInput>
    create: XOR<MatchCreateWithoutTorneoInput, MatchUncheckedCreateWithoutTorneoInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutTorneoInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutTorneoInput, MatchUncheckedUpdateWithoutTorneoInput>
  }

  export type MatchUpdateManyWithWhereWithoutTorneoInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutTorneoInput>
  }

  export type GroupUpsertWithWhereUniqueWithoutTorneoInput = {
    where: GroupWhereUniqueInput
    update: XOR<GroupUpdateWithoutTorneoInput, GroupUncheckedUpdateWithoutTorneoInput>
    create: XOR<GroupCreateWithoutTorneoInput, GroupUncheckedCreateWithoutTorneoInput>
  }

  export type GroupUpdateWithWhereUniqueWithoutTorneoInput = {
    where: GroupWhereUniqueInput
    data: XOR<GroupUpdateWithoutTorneoInput, GroupUncheckedUpdateWithoutTorneoInput>
  }

  export type GroupUpdateManyWithWhereWithoutTorneoInput = {
    where: GroupScalarWhereInput
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyWithoutTorneoInput>
  }

  export type TournamentResultUpsertWithWhereUniqueWithoutTorneoInput = {
    where: TournamentResultWhereUniqueInput
    update: XOR<TournamentResultUpdateWithoutTorneoInput, TournamentResultUncheckedUpdateWithoutTorneoInput>
    create: XOR<TournamentResultCreateWithoutTorneoInput, TournamentResultUncheckedCreateWithoutTorneoInput>
  }

  export type TournamentResultUpdateWithWhereUniqueWithoutTorneoInput = {
    where: TournamentResultWhereUniqueInput
    data: XOR<TournamentResultUpdateWithoutTorneoInput, TournamentResultUncheckedUpdateWithoutTorneoInput>
  }

  export type TournamentResultUpdateManyWithWhereWithoutTorneoInput = {
    where: TournamentResultScalarWhereInput
    data: XOR<TournamentResultUpdateManyMutationInput, TournamentResultUncheckedUpdateManyWithoutTorneoInput>
  }

  export type TournamentCreateWithoutMatchesInput = {
    nombre: string
    tipo: string
    setsPorPartido?: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    maxJugadores?: number
    puntosPorSet?: number
    descripcion?: string | null
    estado?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: GroupCreateNestedManyWithoutTorneoInput
    tournamentResults?: TournamentResultCreateNestedManyWithoutTorneoInput
  }

  export type TournamentUncheckedCreateWithoutMatchesInput = {
    id?: number
    nombre: string
    tipo: string
    setsPorPartido?: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    maxJugadores?: number
    puntosPorSet?: number
    descripcion?: string | null
    estado?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    groups?: GroupUncheckedCreateNestedManyWithoutTorneoInput
    tournamentResults?: TournamentResultUncheckedCreateNestedManyWithoutTorneoInput
  }

  export type TournamentCreateOrConnectWithoutMatchesInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
  }

  export type PlayerCreateWithoutMatches1Input = {
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches2?: MatchCreateNestedManyWithoutJugador2Input
    matchesGanados?: MatchCreateNestedManyWithoutGanadorInput
    tournamentResults?: TournamentResultCreateNestedManyWithoutJugadorInput
    groups?: GroupCreateNestedManyWithoutJugadoresInput
  }

  export type PlayerUncheckedCreateWithoutMatches1Input = {
    id?: number
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches2?: MatchUncheckedCreateNestedManyWithoutJugador2Input
    matchesGanados?: MatchUncheckedCreateNestedManyWithoutGanadorInput
    tournamentResults?: TournamentResultUncheckedCreateNestedManyWithoutJugadorInput
    groups?: GroupUncheckedCreateNestedManyWithoutJugadoresInput
  }

  export type PlayerCreateOrConnectWithoutMatches1Input = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutMatches1Input, PlayerUncheckedCreateWithoutMatches1Input>
  }

  export type PlayerCreateWithoutMatches2Input = {
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches1?: MatchCreateNestedManyWithoutJugador1Input
    matchesGanados?: MatchCreateNestedManyWithoutGanadorInput
    tournamentResults?: TournamentResultCreateNestedManyWithoutJugadorInput
    groups?: GroupCreateNestedManyWithoutJugadoresInput
  }

  export type PlayerUncheckedCreateWithoutMatches2Input = {
    id?: number
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches1?: MatchUncheckedCreateNestedManyWithoutJugador1Input
    matchesGanados?: MatchUncheckedCreateNestedManyWithoutGanadorInput
    tournamentResults?: TournamentResultUncheckedCreateNestedManyWithoutJugadorInput
    groups?: GroupUncheckedCreateNestedManyWithoutJugadoresInput
  }

  export type PlayerCreateOrConnectWithoutMatches2Input = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutMatches2Input, PlayerUncheckedCreateWithoutMatches2Input>
  }

  export type PlayerCreateWithoutMatchesGanadosInput = {
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches1?: MatchCreateNestedManyWithoutJugador1Input
    matches2?: MatchCreateNestedManyWithoutJugador2Input
    tournamentResults?: TournamentResultCreateNestedManyWithoutJugadorInput
    groups?: GroupCreateNestedManyWithoutJugadoresInput
  }

  export type PlayerUncheckedCreateWithoutMatchesGanadosInput = {
    id?: number
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches1?: MatchUncheckedCreateNestedManyWithoutJugador1Input
    matches2?: MatchUncheckedCreateNestedManyWithoutJugador2Input
    tournamentResults?: TournamentResultUncheckedCreateNestedManyWithoutJugadorInput
    groups?: GroupUncheckedCreateNestedManyWithoutJugadoresInput
  }

  export type PlayerCreateOrConnectWithoutMatchesGanadosInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutMatchesGanadosInput, PlayerUncheckedCreateWithoutMatchesGanadosInput>
  }

  export type SetCreateWithoutPartidoInput = {
    numeroSet: number
    puntosJ1?: number
    puntosJ2?: number
    ganadorId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SetUncheckedCreateWithoutPartidoInput = {
    id?: number
    numeroSet: number
    puntosJ1?: number
    puntosJ2?: number
    ganadorId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SetCreateOrConnectWithoutPartidoInput = {
    where: SetWhereUniqueInput
    create: XOR<SetCreateWithoutPartidoInput, SetUncheckedCreateWithoutPartidoInput>
  }

  export type SetCreateManyPartidoInputEnvelope = {
    data: SetCreateManyPartidoInput | SetCreateManyPartidoInput[]
    skipDuplicates?: boolean
  }

  export type TournamentUpsertWithoutMatchesInput = {
    update: XOR<TournamentUpdateWithoutMatchesInput, TournamentUncheckedUpdateWithoutMatchesInput>
    create: XOR<TournamentCreateWithoutMatchesInput, TournamentUncheckedCreateWithoutMatchesInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutMatchesInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutMatchesInput, TournamentUncheckedUpdateWithoutMatchesInput>
  }

  export type TournamentUpdateWithoutMatchesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    setsPorPartido?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxJugadores?: IntFieldUpdateOperationsInput | number
    puntosPorSet?: IntFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupUpdateManyWithoutTorneoNestedInput
    tournamentResults?: TournamentResultUpdateManyWithoutTorneoNestedInput
  }

  export type TournamentUncheckedUpdateWithoutMatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    setsPorPartido?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxJugadores?: IntFieldUpdateOperationsInput | number
    puntosPorSet?: IntFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupUncheckedUpdateManyWithoutTorneoNestedInput
    tournamentResults?: TournamentResultUncheckedUpdateManyWithoutTorneoNestedInput
  }

  export type PlayerUpsertWithoutMatches1Input = {
    update: XOR<PlayerUpdateWithoutMatches1Input, PlayerUncheckedUpdateWithoutMatches1Input>
    create: XOR<PlayerCreateWithoutMatches1Input, PlayerUncheckedCreateWithoutMatches1Input>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutMatches1Input = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutMatches1Input, PlayerUncheckedUpdateWithoutMatches1Input>
  }

  export type PlayerUpdateWithoutMatches1Input = {
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches2?: MatchUpdateManyWithoutJugador2NestedInput
    matchesGanados?: MatchUpdateManyWithoutGanadorNestedInput
    tournamentResults?: TournamentResultUpdateManyWithoutJugadorNestedInput
    groups?: GroupUpdateManyWithoutJugadoresNestedInput
  }

  export type PlayerUncheckedUpdateWithoutMatches1Input = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches2?: MatchUncheckedUpdateManyWithoutJugador2NestedInput
    matchesGanados?: MatchUncheckedUpdateManyWithoutGanadorNestedInput
    tournamentResults?: TournamentResultUncheckedUpdateManyWithoutJugadorNestedInput
    groups?: GroupUncheckedUpdateManyWithoutJugadoresNestedInput
  }

  export type PlayerUpsertWithoutMatches2Input = {
    update: XOR<PlayerUpdateWithoutMatches2Input, PlayerUncheckedUpdateWithoutMatches2Input>
    create: XOR<PlayerCreateWithoutMatches2Input, PlayerUncheckedCreateWithoutMatches2Input>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutMatches2Input = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutMatches2Input, PlayerUncheckedUpdateWithoutMatches2Input>
  }

  export type PlayerUpdateWithoutMatches2Input = {
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches1?: MatchUpdateManyWithoutJugador1NestedInput
    matchesGanados?: MatchUpdateManyWithoutGanadorNestedInput
    tournamentResults?: TournamentResultUpdateManyWithoutJugadorNestedInput
    groups?: GroupUpdateManyWithoutJugadoresNestedInput
  }

  export type PlayerUncheckedUpdateWithoutMatches2Input = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches1?: MatchUncheckedUpdateManyWithoutJugador1NestedInput
    matchesGanados?: MatchUncheckedUpdateManyWithoutGanadorNestedInput
    tournamentResults?: TournamentResultUncheckedUpdateManyWithoutJugadorNestedInput
    groups?: GroupUncheckedUpdateManyWithoutJugadoresNestedInput
  }

  export type PlayerUpsertWithoutMatchesGanadosInput = {
    update: XOR<PlayerUpdateWithoutMatchesGanadosInput, PlayerUncheckedUpdateWithoutMatchesGanadosInput>
    create: XOR<PlayerCreateWithoutMatchesGanadosInput, PlayerUncheckedCreateWithoutMatchesGanadosInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutMatchesGanadosInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutMatchesGanadosInput, PlayerUncheckedUpdateWithoutMatchesGanadosInput>
  }

  export type PlayerUpdateWithoutMatchesGanadosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches1?: MatchUpdateManyWithoutJugador1NestedInput
    matches2?: MatchUpdateManyWithoutJugador2NestedInput
    tournamentResults?: TournamentResultUpdateManyWithoutJugadorNestedInput
    groups?: GroupUpdateManyWithoutJugadoresNestedInput
  }

  export type PlayerUncheckedUpdateWithoutMatchesGanadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches1?: MatchUncheckedUpdateManyWithoutJugador1NestedInput
    matches2?: MatchUncheckedUpdateManyWithoutJugador2NestedInput
    tournamentResults?: TournamentResultUncheckedUpdateManyWithoutJugadorNestedInput
    groups?: GroupUncheckedUpdateManyWithoutJugadoresNestedInput
  }

  export type SetUpsertWithWhereUniqueWithoutPartidoInput = {
    where: SetWhereUniqueInput
    update: XOR<SetUpdateWithoutPartidoInput, SetUncheckedUpdateWithoutPartidoInput>
    create: XOR<SetCreateWithoutPartidoInput, SetUncheckedCreateWithoutPartidoInput>
  }

  export type SetUpdateWithWhereUniqueWithoutPartidoInput = {
    where: SetWhereUniqueInput
    data: XOR<SetUpdateWithoutPartidoInput, SetUncheckedUpdateWithoutPartidoInput>
  }

  export type SetUpdateManyWithWhereWithoutPartidoInput = {
    where: SetScalarWhereInput
    data: XOR<SetUpdateManyMutationInput, SetUncheckedUpdateManyWithoutPartidoInput>
  }

  export type SetScalarWhereInput = {
    AND?: SetScalarWhereInput | SetScalarWhereInput[]
    OR?: SetScalarWhereInput[]
    NOT?: SetScalarWhereInput | SetScalarWhereInput[]
    id?: IntFilter<"Set"> | number
    partidoId?: IntFilter<"Set"> | number
    numeroSet?: IntFilter<"Set"> | number
    puntosJ1?: IntFilter<"Set"> | number
    puntosJ2?: IntFilter<"Set"> | number
    ganadorId?: IntNullableFilter<"Set"> | number | null
    createdAt?: DateTimeFilter<"Set"> | Date | string
    updatedAt?: DateTimeFilter<"Set"> | Date | string
  }

  export type MatchCreateWithoutSetsInput = {
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    torneo: TournamentCreateNestedOneWithoutMatchesInput
    jugador1: PlayerCreateNestedOneWithoutMatches1Input
    jugador2: PlayerCreateNestedOneWithoutMatches2Input
    ganador?: PlayerCreateNestedOneWithoutMatchesGanadosInput
  }

  export type MatchUncheckedCreateWithoutSetsInput = {
    id?: number
    torneoId: number
    jugador1Id: number
    jugador2Id: number
    ganadorId?: number | null
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchCreateOrConnectWithoutSetsInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutSetsInput, MatchUncheckedCreateWithoutSetsInput>
  }

  export type MatchUpsertWithoutSetsInput = {
    update: XOR<MatchUpdateWithoutSetsInput, MatchUncheckedUpdateWithoutSetsInput>
    create: XOR<MatchCreateWithoutSetsInput, MatchUncheckedCreateWithoutSetsInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutSetsInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutSetsInput, MatchUncheckedUpdateWithoutSetsInput>
  }

  export type MatchUpdateWithoutSetsInput = {
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    torneo?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    jugador1?: PlayerUpdateOneRequiredWithoutMatches1NestedInput
    jugador2?: PlayerUpdateOneRequiredWithoutMatches2NestedInput
    ganador?: PlayerUpdateOneWithoutMatchesGanadosNestedInput
  }

  export type MatchUncheckedUpdateWithoutSetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentCreateWithoutGroupsInput = {
    nombre: string
    tipo: string
    setsPorPartido?: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    maxJugadores?: number
    puntosPorSet?: number
    descripcion?: string | null
    estado?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchCreateNestedManyWithoutTorneoInput
    tournamentResults?: TournamentResultCreateNestedManyWithoutTorneoInput
  }

  export type TournamentUncheckedCreateWithoutGroupsInput = {
    id?: number
    nombre: string
    tipo: string
    setsPorPartido?: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    maxJugadores?: number
    puntosPorSet?: number
    descripcion?: string | null
    estado?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchUncheckedCreateNestedManyWithoutTorneoInput
    tournamentResults?: TournamentResultUncheckedCreateNestedManyWithoutTorneoInput
  }

  export type TournamentCreateOrConnectWithoutGroupsInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutGroupsInput, TournamentUncheckedCreateWithoutGroupsInput>
  }

  export type PlayerCreateWithoutGroupsInput = {
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches1?: MatchCreateNestedManyWithoutJugador1Input
    matches2?: MatchCreateNestedManyWithoutJugador2Input
    matchesGanados?: MatchCreateNestedManyWithoutGanadorInput
    tournamentResults?: TournamentResultCreateNestedManyWithoutJugadorInput
  }

  export type PlayerUncheckedCreateWithoutGroupsInput = {
    id?: number
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches1?: MatchUncheckedCreateNestedManyWithoutJugador1Input
    matches2?: MatchUncheckedCreateNestedManyWithoutJugador2Input
    matchesGanados?: MatchUncheckedCreateNestedManyWithoutGanadorInput
    tournamentResults?: TournamentResultUncheckedCreateNestedManyWithoutJugadorInput
  }

  export type PlayerCreateOrConnectWithoutGroupsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutGroupsInput, PlayerUncheckedCreateWithoutGroupsInput>
  }

  export type TournamentUpsertWithoutGroupsInput = {
    update: XOR<TournamentUpdateWithoutGroupsInput, TournamentUncheckedUpdateWithoutGroupsInput>
    create: XOR<TournamentCreateWithoutGroupsInput, TournamentUncheckedCreateWithoutGroupsInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutGroupsInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutGroupsInput, TournamentUncheckedUpdateWithoutGroupsInput>
  }

  export type TournamentUpdateWithoutGroupsInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    setsPorPartido?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxJugadores?: IntFieldUpdateOperationsInput | number
    puntosPorSet?: IntFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUpdateManyWithoutTorneoNestedInput
    tournamentResults?: TournamentResultUpdateManyWithoutTorneoNestedInput
  }

  export type TournamentUncheckedUpdateWithoutGroupsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    setsPorPartido?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxJugadores?: IntFieldUpdateOperationsInput | number
    puntosPorSet?: IntFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUncheckedUpdateManyWithoutTorneoNestedInput
    tournamentResults?: TournamentResultUncheckedUpdateManyWithoutTorneoNestedInput
  }

  export type PlayerUpsertWithWhereUniqueWithoutGroupsInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutGroupsInput, PlayerUncheckedUpdateWithoutGroupsInput>
    create: XOR<PlayerCreateWithoutGroupsInput, PlayerUncheckedCreateWithoutGroupsInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutGroupsInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutGroupsInput, PlayerUncheckedUpdateWithoutGroupsInput>
  }

  export type PlayerUpdateManyWithWhereWithoutGroupsInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutGroupsInput>
  }

  export type PlayerScalarWhereInput = {
    AND?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    OR?: PlayerScalarWhereInput[]
    NOT?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    id?: IntFilter<"Player"> | number
    nombre?: StringFilter<"Player"> | string
    ranking?: IntFilter<"Player"> | number
    puntos?: IntFilter<"Player"> | number
    email?: StringFilter<"Player"> | string
    password?: StringFilter<"Player"> | string
    role?: StringFilter<"Player"> | string
    telefono?: StringNullableFilter<"Player"> | string | null
    fechaNacimiento?: DateTimeNullableFilter<"Player"> | Date | string | null
    activo?: BoolFilter<"Player"> | boolean
    fechaBaja?: DateTimeNullableFilter<"Player"> | Date | string | null
    createdAt?: DateTimeFilter<"Player"> | Date | string
    updatedAt?: DateTimeFilter<"Player"> | Date | string
  }

  export type TournamentCreateWithoutTournamentResultsInput = {
    nombre: string
    tipo: string
    setsPorPartido?: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    maxJugadores?: number
    puntosPorSet?: number
    descripcion?: string | null
    estado?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchCreateNestedManyWithoutTorneoInput
    groups?: GroupCreateNestedManyWithoutTorneoInput
  }

  export type TournamentUncheckedCreateWithoutTournamentResultsInput = {
    id?: number
    nombre: string
    tipo: string
    setsPorPartido?: number
    fechaInicio: Date | string
    fechaFin?: Date | string | null
    maxJugadores?: number
    puntosPorSet?: number
    descripcion?: string | null
    estado?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchUncheckedCreateNestedManyWithoutTorneoInput
    groups?: GroupUncheckedCreateNestedManyWithoutTorneoInput
  }

  export type TournamentCreateOrConnectWithoutTournamentResultsInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutTournamentResultsInput, TournamentUncheckedCreateWithoutTournamentResultsInput>
  }

  export type PlayerCreateWithoutTournamentResultsInput = {
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches1?: MatchCreateNestedManyWithoutJugador1Input
    matches2?: MatchCreateNestedManyWithoutJugador2Input
    matchesGanados?: MatchCreateNestedManyWithoutGanadorInput
    groups?: GroupCreateNestedManyWithoutJugadoresInput
  }

  export type PlayerUncheckedCreateWithoutTournamentResultsInput = {
    id?: number
    nombre: string
    ranking?: number
    puntos?: number
    email: string
    password: string
    role?: string
    telefono?: string | null
    fechaNacimiento?: Date | string | null
    activo?: boolean
    fechaBaja?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches1?: MatchUncheckedCreateNestedManyWithoutJugador1Input
    matches2?: MatchUncheckedCreateNestedManyWithoutJugador2Input
    matchesGanados?: MatchUncheckedCreateNestedManyWithoutGanadorInput
    groups?: GroupUncheckedCreateNestedManyWithoutJugadoresInput
  }

  export type PlayerCreateOrConnectWithoutTournamentResultsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutTournamentResultsInput, PlayerUncheckedCreateWithoutTournamentResultsInput>
  }

  export type TournamentUpsertWithoutTournamentResultsInput = {
    update: XOR<TournamentUpdateWithoutTournamentResultsInput, TournamentUncheckedUpdateWithoutTournamentResultsInput>
    create: XOR<TournamentCreateWithoutTournamentResultsInput, TournamentUncheckedCreateWithoutTournamentResultsInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutTournamentResultsInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutTournamentResultsInput, TournamentUncheckedUpdateWithoutTournamentResultsInput>
  }

  export type TournamentUpdateWithoutTournamentResultsInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    setsPorPartido?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxJugadores?: IntFieldUpdateOperationsInput | number
    puntosPorSet?: IntFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUpdateManyWithoutTorneoNestedInput
    groups?: GroupUpdateManyWithoutTorneoNestedInput
  }

  export type TournamentUncheckedUpdateWithoutTournamentResultsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    setsPorPartido?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    maxJugadores?: IntFieldUpdateOperationsInput | number
    puntosPorSet?: IntFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUncheckedUpdateManyWithoutTorneoNestedInput
    groups?: GroupUncheckedUpdateManyWithoutTorneoNestedInput
  }

  export type PlayerUpsertWithoutTournamentResultsInput = {
    update: XOR<PlayerUpdateWithoutTournamentResultsInput, PlayerUncheckedUpdateWithoutTournamentResultsInput>
    create: XOR<PlayerCreateWithoutTournamentResultsInput, PlayerUncheckedCreateWithoutTournamentResultsInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutTournamentResultsInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutTournamentResultsInput, PlayerUncheckedUpdateWithoutTournamentResultsInput>
  }

  export type PlayerUpdateWithoutTournamentResultsInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches1?: MatchUpdateManyWithoutJugador1NestedInput
    matches2?: MatchUpdateManyWithoutJugador2NestedInput
    matchesGanados?: MatchUpdateManyWithoutGanadorNestedInput
    groups?: GroupUpdateManyWithoutJugadoresNestedInput
  }

  export type PlayerUncheckedUpdateWithoutTournamentResultsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches1?: MatchUncheckedUpdateManyWithoutJugador1NestedInput
    matches2?: MatchUncheckedUpdateManyWithoutJugador2NestedInput
    matchesGanados?: MatchUncheckedUpdateManyWithoutGanadorNestedInput
    groups?: GroupUncheckedUpdateManyWithoutJugadoresNestedInput
  }

  export type MatchCreateManyJugador1Input = {
    id?: number
    torneoId: number
    jugador2Id: number
    ganadorId?: number | null
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchCreateManyJugador2Input = {
    id?: number
    torneoId: number
    jugador1Id: number
    ganadorId?: number | null
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchCreateManyGanadorInput = {
    id?: number
    torneoId: number
    jugador1Id: number
    jugador2Id: number
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentResultCreateManyJugadorInput = {
    id?: number
    torneoId: number
    posicionFinal: number
    puntosGanados: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUpdateWithoutJugador1Input = {
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    torneo?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    jugador2?: PlayerUpdateOneRequiredWithoutMatches2NestedInput
    ganador?: PlayerUpdateOneWithoutMatchesGanadosNestedInput
    sets?: SetUpdateManyWithoutPartidoNestedInput
  }

  export type MatchUncheckedUpdateWithoutJugador1Input = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sets?: SetUncheckedUpdateManyWithoutPartidoNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutJugador1Input = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUpdateWithoutJugador2Input = {
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    torneo?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    jugador1?: PlayerUpdateOneRequiredWithoutMatches1NestedInput
    ganador?: PlayerUpdateOneWithoutMatchesGanadosNestedInput
    sets?: SetUpdateManyWithoutPartidoNestedInput
  }

  export type MatchUncheckedUpdateWithoutJugador2Input = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sets?: SetUncheckedUpdateManyWithoutPartidoNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutJugador2Input = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUpdateWithoutGanadorInput = {
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    torneo?: TournamentUpdateOneRequiredWithoutMatchesNestedInput
    jugador1?: PlayerUpdateOneRequiredWithoutMatches1NestedInput
    jugador2?: PlayerUpdateOneRequiredWithoutMatches2NestedInput
    sets?: SetUpdateManyWithoutPartidoNestedInput
  }

  export type MatchUncheckedUpdateWithoutGanadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sets?: SetUncheckedUpdateManyWithoutPartidoNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutGanadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentResultUpdateWithoutJugadorInput = {
    posicionFinal?: IntFieldUpdateOperationsInput | number
    puntosGanados?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    torneo?: TournamentUpdateOneRequiredWithoutTournamentResultsNestedInput
  }

  export type TournamentResultUncheckedUpdateWithoutJugadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    posicionFinal?: IntFieldUpdateOperationsInput | number
    puntosGanados?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentResultUncheckedUpdateManyWithoutJugadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    posicionFinal?: IntFieldUpdateOperationsInput | number
    puntosGanados?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupUpdateWithoutJugadoresInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    torneo?: TournamentUpdateOneRequiredWithoutGroupsNestedInput
  }

  export type GroupUncheckedUpdateWithoutJugadoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupUncheckedUpdateManyWithoutJugadoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateManyTorneoInput = {
    id?: number
    jugador1Id: number
    jugador2Id: number
    ganadorId?: number | null
    setsJ1?: number
    setsJ2?: number
    ronda: number
    fase?: string
    estado?: string
    fecha?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupCreateManyTorneoInput = {
    id?: number
    nombre: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentResultCreateManyTorneoInput = {
    id?: number
    jugadorId: number
    posicionFinal: number
    puntosGanados: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUpdateWithoutTorneoInput = {
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jugador1?: PlayerUpdateOneRequiredWithoutMatches1NestedInput
    jugador2?: PlayerUpdateOneRequiredWithoutMatches2NestedInput
    ganador?: PlayerUpdateOneWithoutMatchesGanadosNestedInput
    sets?: SetUpdateManyWithoutPartidoNestedInput
  }

  export type MatchUncheckedUpdateWithoutTorneoInput = {
    id?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sets?: SetUncheckedUpdateManyWithoutPartidoNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutTorneoInput = {
    id?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    setsJ1?: IntFieldUpdateOperationsInput | number
    setsJ2?: IntFieldUpdateOperationsInput | number
    ronda?: IntFieldUpdateOperationsInput | number
    fase?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupUpdateWithoutTorneoInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jugadores?: PlayerUpdateManyWithoutGroupsNestedInput
  }

  export type GroupUncheckedUpdateWithoutTorneoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jugadores?: PlayerUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type GroupUncheckedUpdateManyWithoutTorneoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentResultUpdateWithoutTorneoInput = {
    posicionFinal?: IntFieldUpdateOperationsInput | number
    puntosGanados?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jugador?: PlayerUpdateOneRequiredWithoutTournamentResultsNestedInput
  }

  export type TournamentResultUncheckedUpdateWithoutTorneoInput = {
    id?: IntFieldUpdateOperationsInput | number
    jugadorId?: IntFieldUpdateOperationsInput | number
    posicionFinal?: IntFieldUpdateOperationsInput | number
    puntosGanados?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentResultUncheckedUpdateManyWithoutTorneoInput = {
    id?: IntFieldUpdateOperationsInput | number
    jugadorId?: IntFieldUpdateOperationsInput | number
    posicionFinal?: IntFieldUpdateOperationsInput | number
    puntosGanados?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SetCreateManyPartidoInput = {
    id?: number
    numeroSet: number
    puntosJ1?: number
    puntosJ2?: number
    ganadorId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SetUpdateWithoutPartidoInput = {
    numeroSet?: IntFieldUpdateOperationsInput | number
    puntosJ1?: IntFieldUpdateOperationsInput | number
    puntosJ2?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SetUncheckedUpdateWithoutPartidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroSet?: IntFieldUpdateOperationsInput | number
    puntosJ1?: IntFieldUpdateOperationsInput | number
    puntosJ2?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SetUncheckedUpdateManyWithoutPartidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroSet?: IntFieldUpdateOperationsInput | number
    puntosJ1?: IntFieldUpdateOperationsInput | number
    puntosJ2?: IntFieldUpdateOperationsInput | number
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerUpdateWithoutGroupsInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches1?: MatchUpdateManyWithoutJugador1NestedInput
    matches2?: MatchUpdateManyWithoutJugador2NestedInput
    matchesGanados?: MatchUpdateManyWithoutGanadorNestedInput
    tournamentResults?: TournamentResultUpdateManyWithoutJugadorNestedInput
  }

  export type PlayerUncheckedUpdateWithoutGroupsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches1?: MatchUncheckedUpdateManyWithoutJugador1NestedInput
    matches2?: MatchUncheckedUpdateManyWithoutJugador2NestedInput
    matchesGanados?: MatchUncheckedUpdateManyWithoutGanadorNestedInput
    tournamentResults?: TournamentResultUncheckedUpdateManyWithoutJugadorNestedInput
  }

  export type PlayerUncheckedUpdateManyWithoutGroupsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    ranking?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    fechaNacimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    fechaBaja?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PlayerCountOutputTypeDefaultArgs instead
     */
    export type PlayerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TournamentCountOutputTypeDefaultArgs instead
     */
    export type TournamentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TournamentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchCountOutputTypeDefaultArgs instead
     */
    export type MatchCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupCountOutputTypeDefaultArgs instead
     */
    export type GroupCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerDefaultArgs instead
     */
    export type PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TournamentDefaultArgs instead
     */
    export type TournamentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TournamentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchDefaultArgs instead
     */
    export type MatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SetDefaultArgs instead
     */
    export type SetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupDefaultArgs instead
     */
    export type GroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TournamentResultDefaultArgs instead
     */
    export type TournamentResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TournamentResultDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}